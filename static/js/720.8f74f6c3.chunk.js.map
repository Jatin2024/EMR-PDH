{"version":3,"file":"static/js/720.8f74f6c3.chunk.js","mappings":"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","sources":["app/utils/mcoUtils/utilities.js","app/utils/mcoUtils/dropdownValidation.js"],"sourcesContent":["import { Store } from \"app/redux/Store\";\r\nimport dayjs from 'dayjs';\r\nimport shortId from 'shortid';\r\nimport { MCOService } from 'services/mcoService';\r\nimport { SystemSettingsService } from 'services/systemSettingsService';\r\nimport { update_generalValues, updateMcoDetails } from 'app/redux/actions/MCODetailsAction';\r\nimport { getRDOOUOrgSetMappings } from \"app/utils/mcoUtils/dropdownValidation\";\r\nimport generalInfo from \"app/utils/mcoUtils/generalInfo.json\";\r\nimport errorMessages from './errorMessages.json';\r\nimport { formatMessage } from \"./commonUtils\";\r\nconst instance = localStorage.getItem('instance');\r\nconst fetchRSMEAndRMEDetails = () => {\r\n    const mcoService = new MCOService();\r\n\r\n    return mcoService.getRSMEList().then(getRSMEList => {\r\n        return getRSMEList.map(ritem => {\r\n            const splitValues = ritem.split('|');\r\n            return {\r\n                label: `${splitValues[1]}(${splitValues[0]})`,\r\n                key: splitValues[0],\r\n                id: splitValues[2],\r\n                email: splitValues[3]\r\n            };\r\n        });\r\n    }).then(rsmeList => {\r\n        return mcoService.getRMEList().then(getRMEList => {\r\n            const rmeList = getRMEList.map(ritem => {\r\n                const splitValues = ritem.split('|');\r\n                return {\r\n                    label: `${splitValues[1]}(${splitValues[0]})`,\r\n                    key: splitValues[0],\r\n                    id: splitValues[2],\r\n                    email: splitValues[3]\r\n                };\r\n            });\r\n            return { rsmeList, rmeList };\r\n        });\r\n    }).then(({ rsmeList, rmeList }) => {\r\n        Store.dispatch(update_generalValues({\r\n            RSMEList: rsmeList,\r\n            RMEList: rmeList\r\n        }));\r\n    }).catch(err => {\r\n        Store.dispatch(update_generalValues({\r\n            isPageHavingIssue: true\r\n        }));\r\n        throw err;\r\n    });\r\n};\r\n\r\n\r\nconst CloneDataFromMaster = (locresData, masterAttData) => {\r\n    let new_mcoPropeties = { ...locresData.mcoPropeties };\r\n    const msInformation = masterAttData;\r\n\r\n    if (new_mcoPropeties && (new_mcoPropeties?.startdate === null || new_mcoPropeties?.startdate === '' || new_mcoPropeties?.startdate === \"Unassigned\")) {\r\n        new_mcoPropeties['startdate'] = (msInformation?.mcoProperties?.startdate) ? (msInformation?.mcoProperties?.startdate) : null;\r\n    }\r\n    if (new_mcoPropeties && (new_mcoPropeties?.rme === null || new_mcoPropeties?.rme === '' || new_mcoPropeties?.rme === \"Unassigned\")) {\r\n        new_mcoPropeties['rme'] = (msInformation?.mcoProperties?.rme) ? (msInformation?.mcoProperties?.rme) : null;\r\n    }\r\n    if (new_mcoPropeties && (new_mcoPropeties?.rsme === null || new_mcoPropeties?.rsme === '' || new_mcoPropeties?.rsme === \"Unassigned\")) {\r\n        new_mcoPropeties['rsme'] = (msInformation?.mcoProperties?.rsme) ? (msInformation?.mcoProperties?.rsme) : null;\r\n    }\r\n\r\n    // for auto saving\r\n    // submitPropertiesForm(\"auto\");\r\n\r\n    return new_mcoPropeties;\r\n}\r\nconst prepareItemPayload = async (responseData) => {\r\n    try {\r\n        const getStorevalue = Store.getState();\r\n        const plantData = getStorevalue.mcoDetails.plants || [];\r\n        const sourceData = getStorevalue.mcoDetails.source || [];\r\n        const templateList = getStorevalue.mcoDetails.templates || [];\r\n        const getTargetInfo = prepareTargetInfo(responseData, plantData, sourceData);\r\n\r\n        const mcoService = new MCOService();\r\n        let itemData = await mcoService.getItemDetailsByMcoId(responseData?.mcoPropeties?.id);\r\n\r\n        const affectedPartsData = await getAffectedPartsData();\r\n        let affectedItems = itemData?.affectedItems.map(gitem => {\r\n            const filteredAffItem = affectedPartsData.filter(material => gitem?.id === material.id);\r\n\r\n            let filteredAffItemDetail = null;\r\n            if (filteredAffItem.length && filteredAffItem[0].materialType !== null) {\r\n                filteredAffItemDetail = {\r\n                    name: filteredAffItem[0].materialType.name,\r\n                    attributes: {\r\n                        ...filteredAffItem[0].materialType.attributeMap,\r\n                        'Sales Org': getTargetInfo?.plantInfo?.['SalesOrg'],\r\n                        // ...(responseData?.isMaster === \"N\" && { 'Copy From': undefined })\r\n                    }\r\n                };\r\n\r\n                // remove the field while copy the value from master\r\n                if (responseData?.isMaster === \"N\") {\r\n                    delete filteredAffItemDetail.attributes['Copy From'];\r\n                }\r\n            }\r\n            gitem.materialType = filteredAffItemDetail;\r\n\r\n            // dynamic attributes updates  \r\n            const thisTemp = templateList?.find(titem => titem?.templateName === gitem.materialType?.name) || {};\r\n\r\n            if (thisTemp.attributes) {\r\n                thisTemp.attributes.forEach(aitem => {\r\n                    const targetKey = aitem.name;\r\n                    const sourceValue = gitem[targetKey];\r\n                    const sourceData = gitem.attributeGroupData?.[targetKey];\r\n                    const findingMappingValues = Object.keys(aitem.values[0]).find(attritem => aitem.values[0][attritem] === sourceValue);\r\n                    const findingMappingValues2 = Object.keys(aitem.values[0]).find(attritem => aitem.values[0][attritem] === sourceData);\r\n\r\n                    if (sourceValue !== undefined) gitem[targetKey] = findingMappingValues;\r\n                    if (sourceData !== undefined) gitem.attributeGroupData[targetKey] = findingMappingValues2;\r\n                });\r\n            }\r\n\r\n            return gitem;\r\n        });\r\n\r\n        itemData.affectedItems = affectedItems;\r\n        itemData.target = getTargetInfo?.targetInfo;\r\n\r\n        return itemData;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\nconst formatDate = (thisDate) => {\r\n    const dateFormat = dayjs(thisDate).format('YYYYMMDD');\r\n    return dateFormat;\r\n}\r\nconst prepareBomPayload = (itemData, getTargetInfo) => {\r\n    let new_itemData = itemData;\r\n    const collectParentItems = [];\r\n    const new_parentItems = new_itemData?.parentItems.map((pItem) => {\r\n        collectParentItems.push(pItem.parentItemNumber);\r\n        if (getTargetInfo?.plantInfo?.ECN_required === \"N\") {\r\n            pItem.parentItemRevision = '';\r\n            if (pItem?.childItems?.length) {\r\n                const newchildItem = pItem?.childItems?.map((citem) => {\r\n                    citem['childRevision'] = '';\r\n                    citem['effectivityDate'] = formatDate(citem.effectivityDate);\r\n                    return citem;\r\n                })\r\n                pItem.childItems = newchildItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    })\r\n    new_itemData.parentItems = new_parentItems;\r\n\r\n    new_itemData['target'] = getTargetInfo?.targetInfo;\r\n    return { bomPayloadData: new_itemData, collectParentItems: collectParentItems };\r\n}\r\nconst prepareTargetInfo = (responseData, plantData, sourceData) => {\r\n    const org_id = responseData?.mcoPropeties?.organizationId;\r\n    const sourceUrl = responseData?.source?.url;\r\n    const currplantName = responseData?.mcoPropeties?.plantName;\r\n    let targetInfo = [];\r\n    if (org_id) {\r\n        const orgarr = org_id.split(\" \");\r\n        if (orgarr.length) {\r\n            const findSourceInfo = sourceData?.filter((fitem) => {\r\n                return (orgarr[0] === \"ORACLE\") || (fitem.ERPType === orgarr[0] && fitem.instance === orgarr[1] && sourceUrl === fitem?.source);\r\n            }) || [];\r\n            targetInfo = findSourceInfo;\r\n        }\r\n    }\r\n\r\n    return generateTargetInfo(currplantName, plantData, targetInfo)\r\n}\r\n\r\nconst generateTargetInfo = (currplantName, plantData, targetInfo) => {\r\n    let findPlantInfo = null;\r\n    let findTargetInfo = null;\r\n    if (targetInfo.length) {\r\n        targetInfo = targetInfo[0];\r\n\r\n        findPlantInfo = plantData?.filter((fitem) => {\r\n            return fitem.ERPType === targetInfo?.ERPType && (fitem.instance === targetInfo?.environment || fitem.instance === targetInfo?.instance) && fitem.plantName === currplantName;\r\n        }) || null;\r\n\r\n        if (findPlantInfo) {\r\n            findPlantInfo = findPlantInfo[0];\r\n            let findPlantName = findPlantInfo?.aliasPlant;\r\n\r\n            findTargetInfo = {\r\n                system: targetInfo?.ERPType,\r\n                instance: targetInfo?.environment,\r\n                businessUnit: \"BU\",\r\n                plant: findPlantName,\r\n                url: findPlantInfo?.ConnectivityDetails?.url,\r\n                username: findPlantInfo?.ConnectivityDetails?.username,\r\n                password: findPlantInfo?.ConnectivityDetails?.password,\r\n                authkey: \"\",\r\n                port: \"\",\r\n                sapsysnum: findPlantInfo?.ConnectivityDetails?.sapsysnum,\r\n                sapclientid: findPlantInfo?.ConnectivityDetails?.sapclientid,\r\n                \"BOM Usage\": findPlantInfo?.bomusage ?? ''\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        targetInfo: findTargetInfo,\r\n        plantInfo: findPlantInfo\r\n    }\r\n}\r\n\r\nconst updateFinalAcksDetails = (payloadData, callfrom = '') => {\r\n    try {\r\n        const mcoService = new MCOService();\r\n        mcoService.updateFinalAcksDetails(payloadData).then((response) => {\r\n            if (response?.data) {\r\n                const currMcoDetails = response?.data;\r\n\r\n                if (callfrom === \"autorelease\") {\r\n                    return;\r\n                }\r\n                Store.dispatch(update_generalValues({\r\n                    currentMcoDetails: currMcoDetails\r\n                }));\r\n            }\r\n        }).catch((error) => {\r\n            return error;\r\n        });\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nconst callLoggingInfo = async (payloadData, thisType) => {\r\n    try {\r\n        const new_payloadData = {\r\n            type: thisType,\r\n            payloadDetails: payloadData\r\n        };\r\n        const mcoService = new MCOService();\r\n        await mcoService.callLoggingInfo(new_payloadData);\r\n        return;\r\n    } catch (errors) {\r\n        throw errors\r\n    }\r\n}\r\n\r\nconst prepareFormData = (responseData) => {\r\n    const data = {};\r\n    const labelArr = {\r\n        rme: \"Responsible Manufacturing Engineer\",\r\n        rsme: \"Responsible Senior Manufacturing Engineer\",\r\n        mcostate: \"State\",\r\n        responseFromErp: \"Export Status\",\r\n        plantName: \"Plant\",\r\n        description: \"description\",\r\n        startdate: \"Start Date\",\r\n        ECOExportToERP: \"ECOExportToERP\",\r\n    };\r\n    const requiredFields = ['description', 'rme', 'rsme', 'startdate', 'ECOExportToERP'];\r\n    for (const item in responseData?.mcoPropeties) {\r\n        if (responseData?.mcoPropeties.hasOwnProperty(item)) {\r\n            if (requiredFields.includes(item)) {\r\n                if (item === 'startdate') {\r\n                    data['MBOM Start Date'] = responseData?.mcoPropeties[item];\r\n                    data['Start Date'] = responseData?.mcoPropeties[item];\r\n                } else {\r\n                    data[labelArr[item]] = (responseData?.mcoPropeties[item]) ? responseData?.mcoPropeties[item] : \"\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (data?.hasOwnProperty(\"ECOExportToERP\")) {\r\n        delete data?.ECOExportToERP;\r\n    }\r\n    return data;\r\n};\r\nconst prepareFormDataForMassUpdate = (responseData) => {\r\n    const data = {};\r\n    const labelArr = {\r\n        rme: \"Responsible Manufacturing Engineer\",\r\n        rsme: \"Responsible Senior Manufacturing Engineer\",\r\n        mcostate: \"State\",\r\n        responseFromErp: \"Export Status\",\r\n        plantName: \"Plant\",\r\n        description: \"description\",\r\n        startdate: \"Start Date\",\r\n    };\r\n    const requiredFields = ['description', 'rme', 'rsme', 'startdate'];\r\n    for (const item in responseData) {\r\n        if (responseData?.hasOwnProperty(item)) {\r\n            if (requiredFields.includes(item)) {\r\n                if (item === 'startdate') {\r\n                    data['MBOM Start Date'] = responseData?.[item];\r\n                    data['Start Date'] = responseData?.[item];\r\n                } else {\r\n                    data[labelArr[item]] = responseData?.[item];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n};\r\nfunction deepClone(obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return obj; // Return primitives as is\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(deepClone); // Clone arrays recursively\r\n    }\r\n\r\n    // Clone objects recursively\r\n    return Object.fromEntries(\r\n        Object.entries(obj).map(([key, value]) => [key, deepClone(value)])\r\n    );\r\n}\r\n\r\nconst validateForm = (responseData, vType) => {\r\n    let errors = {};\r\n    const labelArr = {\r\n        startDate: \"Startdate\",\r\n        rme: \"Responsible Manufacturing Engineer\",\r\n        rsme: \"Responsible Senior Manufacturing Engineer\",\r\n        mcostate: \"State\",\r\n        responseFromErp: \"Export Status\",\r\n        plantName: \"Plant\",\r\n        description: \"Description\",\r\n        ECOExportToERP: \"ECO Export To ERP\"\r\n    };\r\n    if (Object.keys(responseData?.mcoPropeties || {}).length) {\r\n        const values = responseData?.mcoPropeties;\r\n        console.log(values,\"valuesvaluesvaluesvalues\");\r\n\r\n\r\n        // Validation logic for each field\r\n        // Assuming values.startdate is a Date object or a string in ISO 8601 format (e.g., '2024-04-19')\r\n        if (!values?.startdate) {\r\n            errors.startdate = `${values?.name}: ${labelArr['startDate']} is required`;\r\n        } else {\r\n            let currentDate = new Date();\r\n            currentDate.setHours(0, 0, 0, 0); // Set current date's time to midnight\r\n\r\n            let parts = values?.startdate.split(/[\\s/:]+/); // Split the string by space, /, and :\r\n            let startDate = new Date(parts[2], parts[0] - 1, parts[1], parts[3], parts[4], parts[5]); // Year, month (0-based), day, hour, minute, second\r\n            console.log(startDate,\"startDate\");\r\n            console.log(responseData?.mcoPropeties,\"responseData?.mcoPropeties\");\r\n\r\n            if (startDate < currentDate && responseData?.mcoPropeties.mcostate !== \"Release\" && responseData?.mcoPropeties.mcostate !== \"Create\" && responseData?.mcoPropeties.mcostate !== \"Review\") {                \r\n                errors.startdate = `${values?.name}: ${labelArr['startDate']} must be a present or future date`;\r\n            }\r\n\r\n            // if(value.mcostate == \"release\" ){\r\n            // }\r\n        }\r\n\r\n        if(instance !== 'SaaS'){\r\n            if (!values.rme || values.rme?.toLowerCase() === \"unassigned\") {\r\n                errors.rme = `${values?.name}: ${labelArr['rme']} is required`;\r\n            }\r\n            if (!values.rsme || values.rsme?.toLowerCase() === \"unassigned\") {\r\n                errors.rsme = `${values?.name}: ${labelArr['rsme']} is required`;\r\n            }\r\n            if (!values.description) {\r\n                errors.description = `${values?.name}: ${labelArr['description']} is required`;\r\n            }\r\n        }\r\n        \r\n        if (!values.ECOExportToERP && vType !== \"cavalidation\") {\r\n            errors.ECOExportToERP = `${values?.name}: ${labelArr['ECOExportToERP']} is required`;\r\n        }\r\n    }\r\n    return errors;\r\n};\r\n\r\n// new func\r\nconst validationChecks = async (vType, responseData, affectedPartsData = [], itemValidationArr) => {\r\n    const getStorevalue = Store.getState();\r\n    const templateMappingsInfo = getStorevalue.mcoDetails.templateMappingsInfo || [];\r\n\r\n    let organizationId = responseData?.mcoPropeties?.organizationId;\r\n\r\n    // Validation of Properties tab\r\n    const errorsOfPropertiesForm = validateForm(responseData, vType);\r\n    if (Object.keys(errorsOfPropertiesForm).length) {\r\n        return { valid: false, errDesc: errorsOfPropertiesForm };\r\n    }\r\n\r\n    // Validation of parts tab\r\n    const colErrorsArr = [];\r\n    const mcoData = responseData.mcoPropeties;\r\n    const MCOPlantName = mcoData?.plantName;\r\n    // const organizationId = mcoData?.organizationId;\r\n    affectedPartsData?.forEach((gitem, gkey) => {\r\n\r\n        // for twin plant - rdo checks to allow user to save with selecting template\r\n        // const partBU = gitem?.organization;\r\n        // const plantPair = getRDOOUOrgSetMappings(templateMappingsInfo, partBU, MCOPlantName);\r\n\r\n        // This check will apply to ORACLE AND SAP\r\n        // if (!gitem?.materialType?.name && !plantPair?.includes(MCOPlantName)) {\r\n        //     colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part material type is not valid!`)\r\n        // }\r\n        \r\n        if ((vType === \"lifecycle\" || vType == 'cavalidation') && !gitem?.materialType?.name) {\r\n            let msgtemplate;\r\n            if (organizationId.includes('SAP')) {\r\n                msgtemplate = errorMessages?.messages?.SAP?.templateUnassigned;\r\n            } else if (organizationId.includes('ORACLE')) {\r\n                msgtemplate = errorMessages?.messages?.ORACLE?.templateUnassigned;\r\n            }\r\n            if (msgtemplate) {\r\n                const msgReplacementArr = [mcoData?.name, gitem?.name];\r\n                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                colErrorsArr.push(formattedMessage);\r\n            }\r\n        }\r\n\r\n        // if (organizationId.includes('SAP')) {\r\n        //     // attributes checks\r\n        //     if (!Object.keys(gitem?.materialType)?.includes(\"attributeMap\")) {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part attribute key was missing! please verify it.`)\r\n        //     } else if (gitem?.materialType?.attributeMap === undefined || !Object.keys(gitem?.materialType?.attributeMap).length) {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part attribute values are not valid!`)\r\n        //     }\r\n\r\n        //     // ProductHierarchy checks\r\n        //     if (!Object.keys(gitem)?.includes(\"attributeGroupData\")) {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part attribute group data key was missing! please verify it.`)\r\n        //     } else if (!Object.keys(gitem?.attributeGroupData)?.includes(\"ProductHierarchy\")) {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part product hierarchy key was missing! please verify it.`)\r\n        //     } else if (!gitem?.attributeGroupData?.ProductHierarchy || gitem?.attributeGroupData?.ProductHierarchy === '') {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part product heirarchy value is not valid!`)\r\n        //     }\r\n        // }\r\n    });\r\n\r\n    return { valid: !colErrorsArr?.length, errDesc: colErrorsArr };\r\n}\r\n\r\nconst validationChecks_old = async (vType, responseData, itemValidationArr) => {\r\n    const getStorevalue = Store.getState();\r\n    const templateMappingsInfo = getStorevalue.mcoDetails.templateMappingsInfo || [];\r\n\r\n    let validFieldArr = itemValidationArr;\r\n    let errorCount = {\r\n        isMaTypeHaveErr: true,\r\n        isAttrHaveErr: true,\r\n        isprodHeirarchyHaveErr: true,\r\n    };\r\n    let organizationId = responseData?.mcoPropeties?.organizationId;\r\n\r\n    // Validation of PropertiesForm\r\n    const errorsOfPropertiesForm = validateForm(responseData, vType);\r\n    if (Object.keys(errorsOfPropertiesForm).length) {\r\n        return { valid: false, errDesc: errorsOfPropertiesForm };\r\n    }\r\n\r\n    const mcoData = responseData.mcoPropeties;\r\n    const MCOPlantName = mcoData?.plantName;\r\n\r\n    responseData?.mcoaffectedItem?.forEach((gitem, gkey) => {\r\n        const findMatvalidInd = validFieldArr.findIndex((valItem, valInd) => {\r\n            return (gitem?.id === valItem.id);\r\n        });\r\n\r\n        let checkMatValid = true;\r\n\r\n        // for twin plant - rdo checks to allow user to save with selecting template\r\n        const partBU = gitem?.organization;\r\n        const plantPair = getRDOOUOrgSetMappings(templateMappingsInfo, partBU, MCOPlantName);\r\n        if (plantPair?.includes(MCOPlantName)) {\r\n            checkMatValid = false;\r\n            errorCount['isMaTypeHaveErr'] = false;\r\n        } else if (gitem?.materialType?.name) {\r\n            checkMatValid = false;\r\n            errorCount['isMaTypeHaveErr'] = false;\r\n        }\r\n\r\n        let checkAttValid = true;\r\n        if (organizationId.includes('SAP')) {\r\n            if (gitem?.materialType?.attributeMap !== undefined && Object.keys(gitem?.materialType?.attributeMap).length) {\r\n                checkAttValid = false;\r\n                errorCount['isAttrHaveErr'] = false;\r\n            }\r\n\r\n            let checkProducthierachyValid = true;\r\n            if (gitem?.attributeGroupData?.ProductHierarchy && gitem?.attributeGroupData?.ProductHierarchy !== '') {\r\n                checkProducthierachyValid = false;\r\n                errorCount['isprodHeirarchyHaveErr'] = false;\r\n            }\r\n\r\n            validFieldArr[findMatvalidInd].materialTypeError = checkMatValid;\r\n            validFieldArr[findMatvalidInd].attributeFormError = checkAttValid;\r\n            validFieldArr[findMatvalidInd].producthierachyError = checkProducthierachyValid;\r\n\r\n        } else if (organizationId.includes('ORACLE')) {\r\n            validFieldArr[findMatvalidInd].materialTypeError = checkMatValid;\r\n            validFieldArr[findMatvalidInd].attributeFormError = false; // disable for oracle\r\n            validFieldArr[findMatvalidInd].producthierachyError = false; // disable for oracle\r\n        }\r\n    });\r\n\r\n    return callDisplayErrorNotification(errorCount, validFieldArr, organizationId);\r\n}\r\n\r\nconst callDisplayErrorNotification = (errorCount, itemValidationArr, organizationId) => {\r\n    try {\r\n        let valid = true;\r\n        let errDesc = \"\";\r\n        if (itemValidationArr?.length) {\r\n            itemValidationArr?.map((item) => {\r\n                if (valid && (item?.materialTypeError || item?.attributeFormError || item?.producthierachyError)) {\r\n                    valid = false\r\n                }\r\n                return { valid: true, errDesc: '' };\r\n            })\r\n        }\r\n\r\n        if (!valid) {\r\n            errDesc = 'Please fill mandatory details.';\r\n            if (errorCount?.isMaTypeHaveErr && errorCount?.isAttrHaveErr && organizationId.includes('SAP')) {\r\n                errDesc = \"Invalid Material type and attributes.\";\r\n            } else if (errorCount?.isMaTypeHaveErr) {\r\n                errDesc = \"Invalid Material type.\";\r\n            } else if (errorCount?.isAttrHaveErr && organizationId.includes('SAP')) {\r\n                errDesc = \"Please fill mandatory attributes.\";\r\n            } else if (errorCount?.isprodHeirarchyHaveErr && organizationId.includes('SAP')) {\r\n                errDesc = \"Product Hierarchy information missing.\";\r\n            }\r\n        }\r\n\r\n        return { valid: valid, errDesc: errDesc };\r\n    } catch (err) {\r\n        return { valid: false, errDesc: err?.message };\r\n    }\r\n}\r\n\r\nconst collectSourcePlantTemplate = async (resData, getMasterDatails = []) => {\r\n    // if(instance === \"SaaS\")\r\n    // resData.mcoPropeties = resData?.mcoProperties;\r\n    // console.log('resData', resData);\r\n    try {\r\n        const sptPayload = {\r\n            \"plantName\": resData?.mcoPropeties?.plantName,\r\n            \"organizationId\": resData?.mcoPropeties?.organizationId,\r\n            \"sourceUrl\": resData?.source?.url,\r\n            \"mcotype\": (getMasterDatails[0]?.id === resData?.mcoPropeties?.id) ? \"master\" : \"child\",\r\n            \"businessUnit\": resData?.mcoPropeties?.businessUnit,\r\n        }\r\n        console.log('source payload', sptPayload);\r\n        let materialDataArr = [];\r\n        const mcoService = new MCOService();\r\n        await mcoService.getSourcePlantTemplate(sptPayload).then(async (respdata) => {\r\n            if (respdata) {\r\n                console.log('respdata', respdata);\r\n                console.log('resData?.mcoPropeties?.plantName', resData?.mcoProperties?.plantName);\r\n                respdata.plants.map((plant)=>{\r\n                    if(resData?.mcoPropeties?.plantName){\r\n                        resData.mcoPropeties.organizationId = plant.ERPType + ' ' + plant.instance;\r\n                    }\r\n                })\r\n                console.log('resData?.mcoPropeties?.organizationId', resData);\r\n                materialDataArr = respdata.templates;\r\n\r\n                let merge_templates = respdata.templates || [];\r\n                console.log('getMasterDatails', getMasterDatails);\r\n                if ((getMasterDatails[0]?.id && getMasterDatails[0]?.id) && getMasterDatails[0]?.id !== resData?.mcoPropeties?.id) {\r\n                    const mastersptPayload = {\r\n                        \"plantName\": resData?.mcoaffectedItem[0]?.relatedMCOs[0]?.plantName,\r\n                        \"organizationId\": resData?.mcoPropeties?.organizationId,\r\n                        \"sourceUrl\": resData?.source?.url,\r\n                        \"mcotype\": (getMasterDatails[0]?.id === resData?.mcoaffectedItem[0]?.relatedMCOs[0]?.id) ? \"master\" : \"child\",\r\n                        \"businessUnit\": resData?.mcoPropeties?.businessUnit,\r\n                    }\r\n                    console.log('mastersptPayload', mastersptPayload);\r\n                    await mcoService.getSourcePlantTemplate(mastersptPayload).then((respdata2) => {\r\n                        if (respdata2) {\r\n                            merge_templates = respdata2.templates.concat(respdata.templates);\r\n                        }\r\n                    })\r\n                }\r\n\r\n                const ORGAllowedTemplateMappings = respdata?.templateMappingsInfo?.filter((tmitem) => {\r\n                    return tmitem?.MappingType === \"orgallowedvalues\";\r\n                });\r\n\r\n                const final_spt = {\r\n                    source: (respdata?.source),\r\n                    businessUnitList: { [resData?.mcoPropeties?.name]: respdata?.businessUnit },\r\n                    plants: (respdata?.plants),\r\n                    templates: (merge_templates),\r\n                    materialData: (materialDataArr),\r\n                    templateMappingsInfo: (respdata?.templateMappingsInfo),\r\n                    ORGAllowedTemplateMappings: (ORGAllowedTemplateMappings),\r\n                }\r\n                Store.dispatch(update_generalValues(final_spt));\r\n            }\r\n        })\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\nconst collectAndStoreMRDetails = async (locresData) => {\r\n    console.log('locresData', locresData);\r\n    try {\r\n        let instanceVal = localStorage.getItem('instance');\r\n        let getMrPayload = [];\r\n        if (locresData?.mcoPropeties?.organizationId?.includes('ORACLE')) {\r\n            getMrPayload = locresData?.mcoaffectedItem?.map((gitem, gkey) => {\r\n                return {\r\n                    partName: gitem?.name,\r\n                    plantName: locresData?.mcoPropeties?.plantName,\r\n                    businessUnit: gitem?.organization,\r\n                    mcoId: locresData?.mcoPropeties?.id,\r\n                    mcoName: locresData?.mcoPropeties?.name,\r\n                    revision: gitem?.revision,\r\n                    partId: gitem?.id,\r\n                    targetPlant: \"MVO\",\r\n                    instance: instanceVal || \"onPrem\",\r\n                }\r\n            });\r\n        } else if (locresData?.mcoPropeties?.organizationId?.includes('SAP')) {\r\n            const orgId = locresData?.mcoPropeties?.organizationId;\r\n            const masterMapping = generalInfo?.sapPlantConfiguration; // coming from generalinfo configuration file\r\n            const masterPlantName = masterMapping?.[orgId] || \"MMP01\";            \r\n            getMrPayload = locresData?.mcoaffectedItem.map((gitem, gkey) => {\r\n                return {\r\n                    partName: gitem?.name,\r\n                    plantName: locresData?.mcoPropeties?.plantName,\r\n                    businessUnit: gitem?.organization,\r\n                    mcoId: locresData?.mcoPropeties?.id,\r\n                    mcoName: locresData?.mcoPropeties?.name,\r\n                    revision: gitem?.revision,\r\n                    partId: gitem?.id,\r\n                    targetPlant: masterPlantName,\r\n                    instance: instanceVal || \"onPrem\",\r\n                }\r\n            });\r\n        }\r\n        const mcoService = new MCOService();\r\n        console.log('getMrPayload', getMrPayload);\r\n        const mrData = await mcoService.getMRbyPartAndPlant(getMrPayload);\r\n        await Store.dispatch(update_generalValues({\r\n            mrDetails: mrData,\r\n        }));\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\nconst collectAllPartBUDetails = async (locresData) => {\r\n    try {\r\n        const mrPayload = locresData?.mcoaffectedItem.map((gitem) => {\r\n            return {\r\n                id: gitem?.organization,\r\n            }\r\n        });\r\n        const mcoService = new MCOService();\r\n        await mcoService.getBusinessUnitbyid(mrPayload).then(async (resp) => {\r\n            await Store.dispatch(update_generalValues({\r\n                allPartsBusinessUnitDetails: resp?.data,\r\n            }));\r\n        });\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nconst collectSystemSettingsDetails = async (resData) => {\r\n    try {\r\n        let inst = localStorage.getItem('instance');\r\n        let organizationId = resData?.mcoPropeties?.organizationId;\r\n        if (!organizationId || typeof organizationId !== \"string\") {\r\n            console.error(\"Invalid organizationId:\", organizationId);\r\n            return false; // Prevent further execution\r\n        }\r\n\r\n        const parts = organizationId.split(\" \");\r\n        const ERPType = parts.length ? parts[0] : null;\r\n        if (!ERPType) {\r\n            return false;\r\n        }\r\n\r\n        const payload = [`${ERPType}_${inst || \"onPrem\"}`];\r\n        const systemSettingsService = new SystemSettingsService();\r\n        await systemSettingsService.getSystemSettingsbyid(payload).then((resp) => {\r\n            if (resp?.status === \"success\") {\r\n                Store.dispatch(update_generalValues({\r\n                    systemSetingsDetail: resp?.data,\r\n                }));\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        throw error;\r\n    }\r\n}\r\nconst collectParentMCODetails = async (resData) => {\r\n    try {\r\n        let currentMCOName = resData?.mcoPropeties?.name;\r\n        let currentMCOPlantdetails = resData?.mcoPropeties?.plantName;\r\n        let parentMCOName = currentMCOName?.replace(currentMCOPlantdetails, \"MVO\");\r\n\r\n        if (parentMCOName?.includes(\"MVO\") && !currentMCOName?.includes(\"MVO\")) {\r\n            const payload = [parentMCOName];\r\n            const mcoService = new MCOService();\r\n            await mcoService.getMcoDetailsByName(payload).then((resp) => {\r\n                if (resp?.[parentMCOName]?.mcoProperties?.name === parentMCOName) {\r\n                    Store.dispatch(update_generalValues({\r\n                        parentMCODetails: resp?.[parentMCOName],\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        throw error;\r\n    }\r\n}\r\nconst initialMRFunctions = async (resData) => {\r\n    try {\r\n        await collectAndStoreMRDetails(resData);\r\n        await collectAllPartBUDetails(resData);\r\n        await collectSystemSettingsDetails(resData);\r\n        await collectParentMCODetails(resData);\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nconst specificationfileterfunction = async (mco_id) => {\r\n    try {\r\n        const mcoService = new MCOService();\r\n        await mcoService.getSpecDetailsByMcoId(mco_id).then(async (resAffData) => {\r\n            if (Object.keys(resAffData).length) {\r\n                await Store.dispatch(update_generalValues({\r\n                    specDetails: resAffData\r\n                }));\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        throw error;\r\n    }\r\n}\r\nconst updateMcoDetailsInDatabase = async (updatedPropetiesValue, responseData, saveMode = \"\") => {\r\n    try {\r\n        const getpayloadData = [{ id: responseData?.mcoPropeties?.id, instance: instance}];\r\n        const mcoService = new MCOService();\r\n        const resData = await mcoService.getattributesbyid(getpayloadData);\r\n\r\n        let payloadData = {};\r\n        if ((Object.keys(resData?.data).length && resData?.data[0]) && saveMode === \"saveMcoState\") {\r\n            payloadData = {\r\n                id: responseData?.mcoPropeties?.id,\r\n                producthub: `${responseData?.mcoPropeties?.name}_${responseData?.mcoPropeties?.plantName}`,\r\n                uniquePartId: `${responseData?.mcoPropeties?.name}_${responseData?.mcoPropeties?.plantName}`,\r\n                mcoProperties: updatedPropetiesValue,\r\n            };\r\n        } else {\r\n            payloadData = {\r\n                id: responseData?.mcoPropeties?.id,\r\n                producthub: `${responseData?.mcoPropeties?.name}_${responseData?.mcoPropeties?.plantName}`,\r\n                uniquePartId: `${responseData?.mcoPropeties?.name}_${responseData?.mcoPropeties?.plantName}`,\r\n                mcoProperties: updatedPropetiesValue,\r\n                mcoaffectedItem: responseData?.mcoaffectedItem,\r\n                source: responseData?.source,\r\n                target: responseData?.target\r\n            };\r\n        }\r\n        const updateOrAddAttribute = async (payloadData) => {\r\n            try {\r\n                const updateFunction = (Object.keys(resData?.data).length && resData?.data[0]) ? mcoService.updateattributesbyid : mcoService.addattributes;\r\n                const getUpdateResponse = await updateFunction(payloadData);\r\n                if (saveMode === \"saveMcoState\" && Object.keys(getUpdateResponse?.data || {}).length) {\r\n                    const updateResData = getUpdateResponse?.data || {};\r\n                    await Store.dispatch(updateMcoDetails({\r\n                        mcoPropeties: updateResData?.mcoProperties,\r\n                        mcoaffectedItem: updateResData?.mcoaffectedItem,\r\n                    }));\r\n                    await prepareAffectedPartData();\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                return { status: \"failed\", data: err?.message };\r\n            }\r\n        };\r\n        await updateOrAddAttribute(payloadData);\r\n    } catch (error) {\r\n        console.log(error);\r\n        return { status: \"failed\", data: error?.message };\r\n    }\r\n};\r\nconst getAffectedPartsData = async () => {\r\n    const getStorevalue = Store.getState();\r\n    const responseData = getStorevalue?.mcoDetails?.responseData || {};\r\n    const affectedPartsData = getStorevalue?.mcoDetails?.affectedPartsData || [];\r\n    if (affectedPartsData?.length) {\r\n        return affectedPartsData || [];\r\n    } else {\r\n        return responseData?.mcoaffectedItem || [];\r\n    }\r\n}\r\nconst handleMaterialTypeSelect = async (selectedValue, thisRowId = 0, dropType) => {\r\n    const getStorevalue = Store.getState();\r\n    const templateMappingsInfo = getStorevalue.mcoDetails.templateMappingsInfo || [];\r\n    const responseData = getStorevalue.mcoDetails.responseData || {};\r\n    const materialData = getStorevalue.mcoDetails.materialData || [];\r\n\r\n    // let mcoaffectedItem = [...responseData.mcoaffectedItem];\r\n    const affectedPartsData = await getAffectedPartsData();\r\n    let mcoaffectedItem = [...affectedPartsData];\r\n\r\n    let thisRowIndex = mcoaffectedItem?.findIndex(foption => {\r\n        return foption.id === thisRowId;\r\n    });\r\n\r\n    // console.log(`Selected value: ${selectedValue} and thisRowIndex: ${thisRowIndex}`);\r\n\r\n    if (dropType === \"template\") {\r\n        let findMaterialName = (materialData?.filter(foption => {\r\n            return foption.id === selectedValue;\r\n        }) || []);\r\n        findMaterialName = (findMaterialName?.length) ? findMaterialName[0] : null;\r\n        mcoaffectedItem[thisRowIndex]['materialType'] = (findMaterialName) ? { name: findMaterialName?.templateName } : null;\r\n        mcoaffectedItem[thisRowIndex]['isTemplateValueChange'] = true;\r\n\r\n        // Find makeORBuy value and assign it\r\n        let partBusinessUnitValue = mcoaffectedItem[thisRowIndex]?.organization;\r\n        let buplantmapping_RDOPlants = templateMappingsInfo?.find((acitem) => {\r\n            return acitem.MappingType === 'buplantmapping' && acitem.BUID?.toLowerCase() === partBusinessUnitValue?.toLowerCase() && acitem?.details?.Entity.toLowerCase() === \"bom or no bom\";\r\n        }) || {}\r\n        let hasMbomTemplateList = templateMappingsInfo?.filter((acitem) => {\r\n            return acitem.MappingType === 'orgallowedvalues' && acitem.BUID?.toLowerCase() === partBusinessUnitValue?.toLowerCase() && acitem?.details?.Has_MBOM?.toLowerCase() === \"y\";\r\n        }).map((eitem) => {\r\n            return eitem?.details?.ALLOWABLE_ORG_TEMPLATES;\r\n        }) || [];\r\n\r\n        let isExceptionalPlant = false;\r\n        let hasMbomTemplate = false;\r\n        if (Object.keys(hasMbomTemplateList).length) {\r\n            if (hasMbomTemplateList?.includes(findMaterialName?.templateName)) {\r\n                hasMbomTemplate = true;\r\n            }\r\n        }\r\n        if (Object.keys(buplantmapping_RDOPlants).length) {\r\n            const plantValue = buplantmapping_RDOPlants?.details?.PLANT;\r\n            const getPlantList = Object.keys(plantValue).filter((ekeys) => {\r\n                return plantValue[ekeys]?.toLowerCase() === \"no bom\"\r\n            });\r\n            if (getPlantList?.includes(responseData?.mcoPropeties?.plantName)) {\r\n                isExceptionalPlant = true;\r\n            }\r\n        };\r\n        if (hasMbomTemplate && !isExceptionalPlant) {\r\n            mcoaffectedItem[thisRowIndex]['makeOrBuy'] = \"make\";\r\n            mcoaffectedItem[thisRowIndex]['isMakeOrBuyValueChange'] = true;\r\n        } else {\r\n            mcoaffectedItem[thisRowIndex]['makeOrBuy'] = \"buy\";\r\n            mcoaffectedItem[thisRowIndex]['isMakeOrBuyValueChange'] = true;\r\n        }\r\n    }\r\n\r\n    if (dropType === \"exportToERP\") {\r\n        mcoaffectedItem[thisRowIndex]['exportToERP'] = selectedValue;\r\n        mcoaffectedItem[thisRowIndex]['isExportToERPValueChange'] = true;\r\n    }\r\n\r\n    if (dropType === \"itemStatus\") {\r\n        mcoaffectedItem[thisRowIndex]['itemStatus'] = selectedValue;\r\n        mcoaffectedItem[thisRowIndex]['isItemStatusValueChange'] = true;\r\n    }\r\n\r\n    if (dropType === \"updateRowData\") {\r\n        mcoaffectedItem[thisRowIndex]['newRevision'] = selectedValue?.newRevision;\r\n        mcoaffectedItem[thisRowIndex]['oldRevision'] = selectedValue?.oldRevision;\r\n        mcoaffectedItem[thisRowIndex]['currentSequence'] = selectedValue?.currentSequence;\r\n\r\n        await Store.dispatch(update_generalValues({\r\n            affectedPartsData: mcoaffectedItem,\r\n        }));\r\n    } else {\r\n        await Store.dispatch(update_generalValues({\r\n            affectedPartsData: mcoaffectedItem,\r\n            isMaterialFormEdited: true\r\n        }));\r\n    }\r\n\r\n\r\n    return mcoaffectedItem;\r\n}\r\nconst findLabelForTooltip = (findMaterialDetails) => {\r\n    const getStorevalue = Store.getState();\r\n    const materialData = getStorevalue.mcoDetails.materialData || [];\r\n    if (!findMaterialDetails.id) {\r\n        return;\r\n    }\r\n    const selectedOption = materialData?.find(\r\n        (option) => option.id === findMaterialDetails.id\r\n    );\r\n    return (selectedOption?.templateName) ? selectedOption.templateName : '';\r\n}\r\nconst findDropdownValue = (affval) => {\r\n    const getStorevalue = Store.getState();\r\n    const masterData = getStorevalue.mcoDetails.masterData || {};\r\n    const materialData = getStorevalue.mcoDetails.materialData || [];\r\n    let findMaterialDetails = {};\r\n    if (masterData && Object.keys(masterData).length && masterData?.master === \"N\" && masterData?.mcoaffectedItem) {\r\n        let affkey = masterData?.mcoaffectedItem?.findIndex(foption => {\r\n            return foption.id === affval?.id;\r\n        });\r\n\r\n        findMaterialDetails = materialData?.filter((foption) => {\r\n            return foption.templateName === masterData?.mcoaffectedItem[affkey]?.materialType?.name;\r\n        }) || [];\r\n\r\n        findMaterialDetails = (findMaterialDetails?.length) ? findMaterialDetails[0] : {};\r\n\r\n    } else if (materialData?.length) {\r\n        findMaterialDetails = materialData?.filter((foption) => {\r\n            return ((affval?.materialType && foption.templateName === affval?.materialType?.name) || (foption.desc === affval?.attributeGroupData?.ERPItemTypeTemplate));\r\n        })\r\n\r\n        findMaterialDetails = (findMaterialDetails?.length) ? findMaterialDetails[0] : {};\r\n    }\r\n\r\n    return findMaterialDetails;\r\n}\r\nconst prepareAffectedPartData = async () => {\r\n    const getStorevalue = Store.getState();\r\n    const responseData = getStorevalue.mcoDetails.responseData || {};\r\n    const materialData = getStorevalue.mcoDetails.materialData || [];\r\n    const mrDetails = getStorevalue.mcoDetails.mrDetails || [];\r\n    const eachTemplateOptions = getStorevalue.mcoDetails.eachTemplateOptions || {};\r\n    let dropdownOpts = {};\r\n    if (responseData?.mcoaffectedItem?.length) {\r\n        // For accessing external file data\r\n        if (window?.ExternalClass) {\r\n            let data = {\r\n                affectedItemsInfo: responseData,\r\n            };\r\n            // Create an instance of the ExternalClass class\r\n            const externalClass = new window.ExternalClass(data);\r\n            // Call the getDropdownOptions method with a name\r\n            dropdownOpts = await externalClass.getDropdownOptions();\r\n        }\r\n        responseData?.mcoaffectedItem?.forEach((affval, affkey) => {\r\n            let findMaterialDetails = findDropdownValue(affval, affkey);\r\n            let thisDropOptions = eachTemplateOptions?.[affval?.name] || [];\r\n\r\n            if (Object.keys(dropdownOpts)?.length && Object.keys(dropdownOpts)?.includes(affval?.name)) {\r\n                thisDropOptions = dropdownOpts[affval?.name];\r\n            }\r\n            const templExistOrNot = thisDropOptions?.find(mtemp => {\r\n                return mtemp?.id === findMaterialDetails.id;\r\n            }) || {};\r\n            if (!Object.keys(templExistOrNot)?.length && Object.keys(findMaterialDetails)?.length) {\r\n                let prevSelectedTemplateObj = materialData?.find((foption) => {\r\n                    return findMaterialDetails?.Name === foption.templateName;\r\n                });\r\n                if (prevSelectedTemplateObj) {\r\n                    thisDropOptions = [...thisDropOptions, prevSelectedTemplateObj]\r\n                }\r\n            }\r\n\r\n            const activeMRData = (Object.keys(mrDetails)?.length && mrDetails?.activeMR?.hasOwnProperty(affval?.name) && mrDetails?.activeMR[affval?.name]?.length) ? mrDetails?.activeMR[affval?.name][0] : {};\r\n            const newRevision = Object.keys(activeMRData)?.length ? `${affval?.revision}${activeMRData?.additionalSequence}` : \"\";\r\n            const currentSequence = Object.keys(activeMRData)?.length ? `${activeMRData?.sequence}` : \"\";\r\n\r\n            const previousSeqMRData = (Object.keys(mrDetails)?.length && mrDetails?.activeMR?.hasOwnProperty(affval?.name) && mrDetails?.previousSeqMR[affval?.name]?.length) ? mrDetails?.previousSeqMR[affval?.name][0] : {};\r\n            const oldRevision = Object.keys(previousSeqMRData)?.length ? `${previousSeqMRData?.revision}${previousSeqMRData?.additionalSequence}` : \"\";\r\n\r\n            // update row data with new revisions\r\n            handleMaterialTypeSelect({\r\n                newRevision: newRevision,\r\n                oldRevision: oldRevision,\r\n                currentSequence: currentSequence,\r\n            }, affval?.id, 'updateRowData');\r\n\r\n            // getting active mr template for existing data from enovia\r\n            const activeMRtemplExistOrNot = thisDropOptions?.find(mtemp => {\r\n                return mtemp?.id === findMaterialDetails?.id;\r\n            }) || {};\r\n            if (!Object.keys(activeMRtemplExistOrNot)?.length) {\r\n                let activeTemplateObj = materialData?.find((foption) => {\r\n                    return activeMRData?.template === foption.templateName;\r\n                });\r\n                if (activeTemplateObj && !affval?.isTemplateValueChange) {\r\n                    thisDropOptions = [...thisDropOptions, activeTemplateObj]\r\n                    findMaterialDetails = activeTemplateObj;\r\n                    handleMaterialTypeSelect(findMaterialDetails?.templates, affval?.id, 'template');\r\n                }\r\n            }\r\n            let defaultOptValue = {};\r\n            if (Object.keys(previousSeqMRData || {})?.length) {\r\n                let previousSeqMRTemplateObj = materialData?.find((foption, findex) => {\r\n                    return foption?.templateName === previousSeqMRData?.template;\r\n                }) || {};\r\n                if (Object.keys(previousSeqMRTemplateObj)?.length) {\r\n                    thisDropOptions.push(previousSeqMRTemplateObj); // push the option to dropdown \r\n                    if (!affval?.isTemplateValueChange) {\r\n                        defaultOptValue = previousSeqMRTemplateObj; // for selecting the option\r\n                    }\r\n                }\r\n            }\r\n            if (!Object.keys(findMaterialDetails || {})?.length && !affval?.isTemplateValueChange) {\r\n                const isRevisionTempExist = thisDropOptions?.find((fcheckItem) => {\r\n                    return fcheckItem?.templateName === previousSeqMRData?.template;\r\n                }) || {};\r\n                if (!Object.keys(isRevisionTempExist)?.length && Object.keys(defaultOptValue)?.length) {\r\n                    findMaterialDetails = defaultOptValue;\r\n                    handleMaterialTypeSelect(findMaterialDetails?.templates, affval?.id, 'template');\r\n                } else if (Object.keys(isRevisionTempExist)?.length) {\r\n                    findMaterialDetails = isRevisionTempExist;\r\n                    handleMaterialTypeSelect(findMaterialDetails?.templates, affval?.id, 'template');\r\n                }\r\n            }\r\n            let getExportToERPValue = affval?.exportToERP;\r\n            let getItemStatusValue = (affval?.itemStatus)?.toLowerCase();\r\n            if (!getExportToERPValue && !affval?.isExportToERPValueChange) {\r\n                handleMaterialTypeSelect(getExportToERPValue, affval?.id, 'exportToERP')\r\n            }\r\n            if (!getItemStatusValue && !affval?.isItemStatusValueChange) {\r\n                getItemStatusValue = activeMRData?.ERPStatus?.toLowerCase();\r\n                handleMaterialTypeSelect(getItemStatusValue, affval?.id, 'itemStatus')\r\n            }\r\n        });\r\n    }\r\n    return;\r\n}\r\nconst exportMCOData = async (propertiesData, exportAffectedPartsData) => {\r\n    const getStorevalue = Store.getState();\r\n    const responseData = getStorevalue.mcoDetails.responseData || {};\r\n    const currentMcoDetails = getStorevalue.mcoDetails.currentMcoDetails || {};\r\n    // const exportAffectedPartsData = getStorevalue.mcoDetails.exportAffectedPartsData || [];\r\n\r\n    \r\n    const mcoService = new MCOService();\r\n    const affectedPartsData = await getAffectedPartsData();\r\n    let mcoaffectedItemVal = affectedPartsData;\r\n    if (exportAffectedPartsData?.length) {\r\n        mcoaffectedItemVal = exportAffectedPartsData;\r\n    } else {\r\n        mcoaffectedItemVal = sortAffData({ key: 'name', direction: 'asc' });\r\n    }\r\n\r\n    const new_mcoaffectedItemVal = mcoaffectedItemVal?.map((eitem) => {\r\n        let ErpStatus = responseData?.itemERPStatus && responseData?.itemERPStatus.filter((efitem) => {\r\n            return efitem?.Item_Name === eitem?.name;\r\n        });\r\n        ErpStatus = (ErpStatus?.length) ? ErpStatus[0]?.status : 'Not yet processed!';\r\n        eitem[\"ErpStatus\"] = ErpStatus;\r\n        return eitem;\r\n    }) || [];\r\n\r\n    const resData = await mcoService.exportMCOData({\r\n        mcoProperties: propertiesData,\r\n        mcoaffectedItem: new_mcoaffectedItemVal,\r\n        ERPstatus: currentMcoDetails?.ERPstatus,\r\n        ERPErrorDescription: currentMcoDetails?.ERPErrorDescription\r\n    });\r\n    console.log(resData);\r\n    return resData;\r\n}\r\nconst sortAffData = (sortConfig) => {\r\n    const getStorevalue = Store.getState();\r\n    const responseData = getStorevalue.mcoDetails.responseData || {};\r\n    const affectedPartsData = getStorevalue.mcoDetails.affectedPartsData || [];\r\n\r\n    let data = responseData?.mcoaffectedItem || [];\r\n    if (affectedPartsData?.length) {\r\n        data = affectedPartsData;\r\n    }\r\n\r\n    if (!sortConfig.key) return data;\r\n\r\n    console.log(sortConfig, \"=====sortConfig\");\r\n\r\n    let sortedData = [];\r\n    if (sortConfig.key === \"materialTypeTemplate\") {\r\n        sortedData = [...data].map(item => {\r\n            item.materialType = (item?.materialType) ? item?.materialType : { name: \"Unassigned\" };\r\n            return item;\r\n        }).sort((a, b) => {\r\n            if (a[\"materialType\"]?.[\"name\"] < b[\"materialType\"]?.[\"name\"]) return sortConfig.direction === 'asc' ? -1 : 1;\r\n            if (a[\"materialType\"]?.[\"name\"] > b[\"materialType\"]?.[\"name\"]) return sortConfig.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n        }) || [];\r\n    } else {\r\n        sortedData = [...data].sort((a, b) => {\r\n            if (a[sortConfig.key] < b[sortConfig.key]) return sortConfig.direction === 'asc' ? -1 : 1;\r\n            if (a[sortConfig.key] > b[sortConfig.key]) return sortConfig.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n        }) || [];\r\n    }\r\n\r\n    console.log(sortedData, \"========sortedData\");\r\n    return sortedData;\r\n};\r\nconst trimmingDisplayContent = (ERPErrorDescription = null) => {\r\n    let newERPErrorDescriptionVal = ERPErrorDescription;\r\n    if (Array.isArray(ERPErrorDescription)) {\r\n        newERPErrorDescriptionVal = newERPErrorDescriptionVal?.flat()?.join();\r\n    }\r\n    newERPErrorDescriptionVal = newERPErrorDescriptionVal?.replaceAll('/', '')\r\n        .replaceAll('[', '')\r\n        .replaceAll(']', '')\r\n        .replaceAll('\"', '')\r\n        .replaceAll('\"', '');\r\n    return newERPErrorDescriptionVal;\r\n}\r\nconst getIsMaterialFormEdited = async () => {\r\n    const getStorevalue = Store.getState();\r\n    const isMaterialFormEdited = getStorevalue?.mcoDetails?.isMaterialFormEdited || false;\r\n    return isMaterialFormEdited;\r\n}\r\nconst handleErrorForThrows = (err, context) => {\r\n    // Log the error with additional context\r\n    console.error(`Error in ${context}:`, err);\r\n    // Optionally, you can integrate with an error tracking service like Sentry\r\n    // Sentry.captureException(err);\r\n    // Notify the user (you can customize this)\r\n    // alert('An error occurred while processing your request. Please try again later.');\r\n};\r\n\r\nexport {\r\n    formatDate,\r\n    fetchRSMEAndRMEDetails,\r\n    CloneDataFromMaster,\r\n    prepareItemPayload,\r\n    prepareBomPayload,\r\n    prepareTargetInfo,\r\n    updateFinalAcksDetails,\r\n    callLoggingInfo,\r\n    prepareFormData,\r\n    deepClone,\r\n    validationChecks,\r\n    initialMRFunctions,\r\n    specificationfileterfunction,\r\n    collectSourcePlantTemplate,\r\n    updateMcoDetailsInDatabase,\r\n    prepareFormDataForMassUpdate,\r\n    handleMaterialTypeSelect,\r\n    findLabelForTooltip,\r\n    findDropdownValue,\r\n    prepareAffectedPartData,\r\n    exportMCOData,\r\n    sortAffData,\r\n    trimmingDisplayContent,\r\n    getAffectedPartsData,\r\n    getIsMaterialFormEdited,\r\n    handleErrorForThrows\r\n}","/*global console*/\r\nimport { Store } from \"app/redux/Store\";\r\nimport { MCOService } from 'services/mcoService';\r\nimport errorMessages from './errorMessages.json';\r\nimport { formatMessage } from \"./commonUtils\";\r\n// import { useGetTemplateMappings } from '../../../hooks/mcoHooks/useGetTemplateMappings';\r\n\r\nconst findMRTemplateByPart = (mrLists = {}, partInfo = null) => {\r\n    if (Object.keys(mrLists).includes(partInfo.name)) {\r\n        return mrLists[partInfo.name][0];\r\n    } else {\r\n        return {};\r\n    }\r\n\r\n    // return mrLists?.find((fitem) => {\r\n    //     return fitem?.partAndPlant.includes(partInfo.name);\r\n    // });\r\n}\r\nconst findBusinessUnitByPlant = (buLists, businessUnit = null) => {\r\n    return buLists?.find((fitem) => {\r\n        return fitem?.businessUnit === businessUnit;\r\n    });\r\n}\r\nconst whereUsedChecks = (whereUsedLists, MCOPlantName) => {\r\n    return whereUsedLists?.filter((fitem) => {\r\n        return (fitem?.makeOrBuy?.toLowerCase()) === \"make\" && fitem?.plantName === MCOPlantName;\r\n    }) || [];\r\n}\r\n\r\nconst getHighestSeqCurrentPendingOrActiveMRForPart = (partName = \"\") => {\r\n    const getStorevalue = Store.getState();\r\n    const mrDetails = getStorevalue?.mcoDetails?.mrDetails || [];\r\n    const retunedMRS = Object.keys(mrDetails?.getHighestSeqCurrentPendingOrActiveMR)?.includes(partName) ? mrDetails?.getHighestSeqCurrentPendingOrActiveMR[partName] : [];\r\n    retunedMRS.forEach(eachMR => {\r\n        eachMR.plantName = eachMR.partAndPlant.split('_')[1];\r\n    })\r\n    return retunedMRS || [];\r\n}\r\nconst getChildPartDetails = async (responseData) => {\r\n    let collectChildParts = {};\r\n    let collectWhereUsedInParts = {};\r\n    responseData?.mcoaffectedItem.forEach((eachChildItem) => {\r\n        let collectChildPartName = [];\r\n        eachChildItem?.childInfo?.forEach(eachparts => {\r\n            const partsDetailsArr = eachparts.split(\"|\");\r\n            collectChildPartName.push({\r\n                \"partAndPlant\": `${partsDetailsArr[1]}_${responseData?.mcoPropeties?.plantName}`,\r\n                \"plantName\": `${responseData?.mcoPropeties?.plantName}`,\r\n                \"partName\": `${partsDetailsArr[1]}`,\r\n                \"partId\": `${partsDetailsArr[3]}`,\r\n                \"revision\": `${partsDetailsArr[2]}`\r\n            });\r\n        });\r\n        collectChildParts[eachChildItem?.name] = collectChildPartName;\r\n\r\n        let collectUsedInPartName = [];\r\n        eachChildItem?.whereUsedInfo?.forEach(whereUsedparts => {\r\n            const whereUsedpartsDetailsArr = whereUsedparts.split(\"|\");\r\n            collectUsedInPartName.push({\r\n                \"partAndPlant\": `${whereUsedpartsDetailsArr[1]}_${responseData?.mcoPropeties?.plantName}`,\r\n                \"plantName\": `${responseData?.mcoPropeties?.plantName}`,\r\n                \"partName\": `${whereUsedpartsDetailsArr[1]}`,\r\n                \"partId\": `${whereUsedpartsDetailsArr[3]}`,\r\n                \"revision\": `${whereUsedpartsDetailsArr[2]}`\r\n            });\r\n        });\r\n        collectWhereUsedInParts[eachChildItem?.name] = collectUsedInPartName;\r\n    });\r\n    const mcoService = new MCOService();\r\n    let instanceVal = localStorage.getItem('instance');\r\n    let childDetailsInfoResponse = await mcoService.getChildPartDetails({\r\n        childParts: collectChildParts,\r\n        whereUsedInParts: collectWhereUsedInParts,\r\n        instance: instanceVal\r\n    });\r\n\r\n    return childDetailsInfoResponse;\r\n}\r\nconst checkTemplateExists = (eachItem, onMBOM_NoTemplatesList, currPartChilddetails, collectErrors, plantName) => {\r\n    if (!(currPartChilddetails.length)) {\r\n        collectErrors.push(`${eachItem.name} - highest child template not exist in MR details table. throw error`);\r\n    }\r\n    const slChildrenWithoutMR = [];\r\n    const slChildNotAllowedOnMBOM = [];\r\n    eachItem?.childInfo.forEach((cfitem) => {\r\n        const childDetailsArr2 = cfitem.split(\"|\");\r\n        const childPartName = childDetailsArr2[1];\r\n        const mrData = currPartChilddetails.find((fitem) => {\r\n            return fitem?.partName.includes(childPartName)\r\n        })\r\n        if (!mrData || (mrData && (!mrData.template || mrData.template === \"Unassigned\"))) {\r\n            slChildrenWithoutMR.push(`${childPartName} : ${plantName}`);\r\n            // collectErrors.push(`${eachItem.name} - highest child template not exist in MR details table. throw error`);//slChildrenWithoutMR\r\n        } else {\r\n            const tempExist2 = onMBOM_NoTemplatesList.map(eachTempRec => eachTempRec.details?.ALLOWABLE_ORG_TEMPLATES).includes(mrData?.template)\r\n            if (tempExist2) {\r\n                slChildNotAllowedOnMBOM.push(`${childPartName} : ${plantName}`);\r\n                //collectErrors.push(`${eachItem.name} - child template not exist in onMBOM_NoTemplatesList on ORGALLOWEDTEMPLATE. throw error`);//slChildNotAllowedOnMBOM\r\n            }\r\n        }\r\n    });\r\n    if (slChildrenWithoutMR?.length) {\r\n        const childMessage = slChildrenWithoutMR?.join('\\n');\r\n        const msgtemplate = errorMessages?.messages?.validationMessages.CHILD_PART_MR_NOT_ASSIGNED;\r\n        const msgReplacementArr = [eachItem?.name, childMessage];\r\n        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n        collectErrors.push(formattedMessage);\r\n    }\r\n\r\n    if (slChildNotAllowedOnMBOM?.length) {\r\n        const childMessage = slChildNotAllowedOnMBOM.join('\\n');\r\n        const msgtemplate = errorMessages?.messages?.validationMessages?.NotAllowedOnMBOMChildren;\r\n        const msgReplacementArr = [eachItem?.displayType, eachItem?.name, childMessage];\r\n        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n        collectErrors.push(formattedMessage);\r\n    }\r\n    return collectErrors;\r\n}\r\n\r\nconst getMVONotAllowedToHaveEBOMValues = (templateMappingsInfo, businessUnit = \"\",) => {\r\n    \r\n    const finalTemplates = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'orgallowedvalues' && item1.BUID === businessUnit && item1?.details?.EBOM_Allowed?.toUpperCase() === 'N';\r\n    }).map(titem => {\r\n        return titem?.details?.ALLOWABLE_ORG_TEMPLATES;\r\n    }) || [];\r\n    return finalTemplates;\r\n}\r\n\r\nconst primaryToPurchageValidationMapping = (templateMappingsInfo = \"\", businessUnit = \"\") => {\r\n    const purchageValidationMapping = templateMappingsInfo.find((item1) => {\r\n        return item1.MappingType === 'buplantmapping' && item1.BUID === businessUnit && item1?.details?.Entity.toUpperCase() === 'NONE OR PO ORG';\r\n    });\r\n    if (purchageValidationMapping && Object.keys(purchageValidationMapping).length) {\r\n        const primaryToPurchagePlants = purchageValidationMapping.details?.PLANT;\r\n        Object.keys(primaryToPurchagePlants).forEach(eachKey => {\r\n            if (primaryToPurchagePlants[eachKey] === 'None' || primaryToPurchagePlants[eachKey] === '') {\r\n                delete primaryToPurchagePlants[eachKey];\r\n            }\r\n        })\r\n        return primaryToPurchagePlants;\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\nconst groupByValues = (anyObject) => {\r\n    const purchagetoPrimaryMap = new Map();\r\n    let purchageValue = '';\r\n    Object.keys(anyObject)?.map(eachKey => {\r\n        purchageValue = anyObject[eachKey];\r\n        if (purchagetoPrimaryMap.has(purchageValue)) {\r\n            const value = purchagetoPrimaryMap.get(purchageValue)\r\n            purchagetoPrimaryMap.set(purchageValue, [...value, eachKey])\r\n        } else {\r\n            purchagetoPrimaryMap.set(purchageValue, [eachKey])\r\n        }\r\n    })\r\n    return purchagetoPrimaryMap;\r\n}\r\n\r\nconst purchageToPrimaryValidationMapping = (templateMappingsInfo = [], businessUnit = '') => {\r\n    let primaryToPurchageValidation = primaryToPurchageValidationMapping(templateMappingsInfo, businessUnit);\r\n    return groupByValues(primaryToPurchageValidation);\r\n}\r\n\r\nconst getRDOOUOrgSetMappings = (templateMappingsInfo = '', businessUnit = '', plantToMatch) => {\r\n    let buplantmapping_RDOChecks = templateMappingsInfo?.find((acitem) => {\r\n        return acitem.MappingType === 'buplantmapping' && acitem.BUID === businessUnit && acitem?.details?.Entity.toUpperCase() === 'RDO OU ORG SET';\r\n    });\r\n\r\n    buplantmapping_RDOChecks = (buplantmapping_RDOChecks && Object.keys(buplantmapping_RDOChecks).length) ? buplantmapping_RDOChecks?.details?.PLANT : {};\r\n\r\n    let plantGroups = templateMappingsInfo?.find((item1) => {\r\n        return item1.MappingType === 'buplantmapping' && item1.BUID === businessUnit && item1?.details?.Entity.toUpperCase() === 'PLANTGROUP';\r\n    });\r\n    plantGroups = (plantGroups && Object.keys(plantGroups).length) ? plantGroups?.details?.PLANT : {};\r\n\r\n    const OUgroupMap = groupByValues(plantGroups);\r\n\r\n    let matchedPlantsSet = []\r\n    OUgroupMap.forEach((values, key) => {\r\n        const filteredPlants = values?.filter(plant => buplantmapping_RDOChecks && buplantmapping_RDOChecks[plant] && buplantmapping_RDOChecks[plant].toLowerCase() === 'yes')\r\n        if (filteredPlants?.includes(plantToMatch)) {\r\n            matchedPlantsSet = filteredPlants;\r\n            return matchedPlantsSet;\r\n        }\r\n    })\r\n    return matchedPlantsSet;\r\n}\r\n\r\nconst getOrgAllowedTemplateMappingForPlant = (templateMappingsInfo, businessUnit = \"\", plant = \"\", partType = \"\") => {\r\n    let finalTemplates = [];\r\n    const orgAllowedTemplatesForPlant = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'orgallowedvalues' && item1.BUID === businessUnit && Object.keys(item1?.details?.Plants).includes(plant.toUpperCase()) && item1?.details?.Plants[plant.toUpperCase()] === \"Y\";\r\n    }) || [];\r\n    const getPartTypeDetails = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'parttypetotemplate' && item1.BUID === businessUnit;\r\n    }) || [];\r\n    const parttypetotemplateArr = getPartTypeDetails.filter((item1) => {\r\n        return item1.details.ENGG_ITEM_TYPE === partType;\r\n    }) || [];\r\n    let templatesMappingsArr = [];\r\n    if (parttypetotemplateArr.length) {\r\n        orgAllowedTemplatesForPlant.forEach((item1) => {\r\n            const getPlantBasedList = parttypetotemplateArr[0]?.details?.allowableOrgTemplates.filter((item2) => {\r\n                return item2.org_allowed_template === item1?.details?.ALLOWABLE_ORG_TEMPLATES;\r\n            }) || [];\r\n            if (getPlantBasedList.length) {\r\n                templatesMappingsArr.push(item1);\r\n            }\r\n        });\r\n    } else {\r\n        const flatenPartTypeTemplates = getPartTypeDetails?.map(partTypeTemplate => partTypeTemplate.details?.allowableOrgTemplates)?.flat();\r\n        const templatesForAllTypes = flatenPartTypeTemplates?.filter(eachRec => eachRec.exclusive_use?.toLowerCase() === 'yes')?.map(template => template.org_allowed_template)\r\n        templatesMappingsArr = orgAllowedTemplatesForPlant?.filter(eachTemplate => !(templatesForAllTypes?.includes(eachTemplate?.details?.ALLOWABLE_ORG_TEMPLATES)))\r\n    }\r\n\r\n    if (templatesMappingsArr.length) {\r\n        finalTemplates = templatesMappingsArr?.map((tItem) => {\r\n            return tItem?.details?.ALLOWABLE_ORG_TEMPLATES\r\n        });\r\n    }\r\n    return finalTemplates;\r\n}\r\n\r\nconst getFromTOmvoAllowedChangesOracleTemplates = ({ templateMappingsInfo, businessUnit = \"\", plant = \"\", prevTemplateName = \"\" }) => {\r\n    let finalTemplates = [];\r\n    const fromTOmvoAllowedChangesOracleTemplates = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'mvoallowedchanges' && item1.BUID === businessUnit && item1?.details?.MVO_TEMPLATE_FROM === prevTemplateName;\r\n    }) || [];\r\n\r\n    if (fromTOmvoAllowedChangesOracleTemplates.length) {\r\n        finalTemplates = fromTOmvoAllowedChangesOracleTemplates[0]?.details?.MVO_TEMPLATES_TO?.map((tItem) => {\r\n            return tItem.MVO_TEMPLATE_TO\r\n        }) || []\r\n    }\r\n    return finalTemplates;\r\n}\r\n\r\nconst getMVOTemplateCompatibilityOracleTemplates = ({ templateMappingsInfo, businessUnit = \"\", plant = \"\", templateName = \"\" }) => {\r\n    let finalTemplates = [];\r\n    const MVOTemplateCompatibilityOracleTemplates = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'mvoTemplateCompatibility' && item1.BUID === businessUnit && item1?.details?.MVO_TEMPLATE_OPTION === templateName;;\r\n    }) || [];\r\n\r\n    if (MVOTemplateCompatibilityOracleTemplates.length) {\r\n        finalTemplates = MVOTemplateCompatibilityOracleTemplates[0]?.details?.allowableOrgTemplates?.filter(fiItem => fiItem.status?.toLowerCase() === 'active')?.map((tItem) => {\r\n            return tItem.ALLOWABLE_ORG_TEMPLATE\r\n        }) || []\r\n    }\r\n    return finalTemplates;\r\n}\r\n\r\nconst getMustBeAssignedToPurchaseValidationPlantList = (templateMappingsInfo = '', businessUnit = \"\") => {\r\n\r\n    const finalTemplates = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'orgallowedvalues' && item1.BUID === businessUnit && item1?.details?.PO_Org_Exist_Check?.toUpperCase() === 'Y';\r\n    }) || [];\r\n\r\n    return finalTemplates;\r\n}\r\n\r\n// const getRDOOUOrgSetMappings = (templateMappingsInfo = '', businessUnit = \"\", plantNameToMatch) => {\r\n//     const buplantmappingRecords = templateMappingsInfo.find((item1) => {\r\n//         return item1.MappingType === 'buplantmapping' && item1.BUID === businessUnit && item1?.details?.Entity.toUpperCase() === 'RDO OU ORG SET';\r\n//     });\r\n\r\n//     const RDOOUOrgSetMappings = buplantmappingRecords ? buplantmappingRecords?.details?.PLANT : null;\r\n//     const plantPairWithYes = [];\r\n//     if (RDOOUOrgSetMappings && (RDOOUOrgSetMappings[plantNameToMatch] && RDOOUOrgSetMappings[plantNameToMatch] !== undefined)) {\r\n//         Object.keys(RDOOUOrgSetMappings).map(eachKey => {\r\n//             if (RDOOUOrgSetMappings[eachKey]?.toUpperCase() === 'YES') {\r\n//                 plantPairWithYes.push(eachKey)\r\n//             }\r\n//         })\r\n//     }\r\n//     return plantPairWithYes;\r\n// }\r\n\r\nconst getSetCompatibleTemplates = (templateMappingsInfo = '', businessUnit = \"\", templateName) => {\r\n    let finalTemplates = []\r\n    const getMappedTemplatesList = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'setcompatibletemplates' && item1.BUID === businessUnit && item1?.details?.TEMPLATE_ORG_EXISTING === templateName;\r\n    }) || [];\r\n    if (getMappedTemplatesList.length) {\r\n        finalTemplates = getMappedTemplatesList[0]?.details?.TEMPLATE_ORG_MODIFYING?.map((tItem) => {\r\n            return tItem.TEMPLATE_ORG_MODIFYING\r\n        })\r\n    }\r\n    return finalTemplates;\r\n}\r\n// error message related code\r\n\r\n\r\nconst dropdownValidation = async (responseData) => {\r\n    const getStorevalue = Store.getState();\r\n    const templateList = getStorevalue.mcoDetails.templates || [];\r\n    const orgAllowedTemplateMappingsList = getStorevalue.mcoDetails.ORGAllowedTemplateMappings || [];\r\n    const templateMappingsInfo = getStorevalue.mcoDetails.templateMappingsInfo || [];\r\n    const businessUnitInfo = getStorevalue.mcoDetails.businessUnitList || [];\r\n    const mrDetails = getStorevalue.mcoDetails.mrDetails || [];\r\n\r\n    let combineAllErrors = [];\r\n    const childPartAndWhereUsedMRDetails = await getChildPartDetails(responseData);\r\n\r\n    responseData?.mcoaffectedItem.forEach((eachItem) => {\r\n        let collectErrors = [];\r\n        const currentPartBuInfo = findBusinessUnitByPlant(businessUnitInfo[responseData?.mcoPropeties?.name], eachItem?.organization);\r\n        const mcoData = responseData.mcoPropeties;\r\n        const MCOPlantName = mcoData?.plantName;\r\n        const partTypeDisplayName = eachItem?.displayType;\r\n        const activeMRInfo = findMRTemplateByPart(mrDetails?.activeMR, eachItem) || {};\r\n        const previousSeqMRInfo = findMRTemplateByPart(mrDetails?.previousSeqMR, eachItem) || {};\r\n        const getHighestSeqCurrentOrActiveMR = findMRTemplateByPart(mrDetails?.getHighestSeqCurrentOrActiveMR, eachItem) || {};\r\n\r\n        let whereUsedMRinfo = null;\r\n        if (Object.keys(childPartAndWhereUsedMRDetails?.whereUsedInParts).includes(eachItem?.name)) {\r\n            whereUsedMRinfo = whereUsedChecks(childPartAndWhereUsedMRDetails?.whereUsedInParts[eachItem?.name], MCOPlantName);\r\n        }\r\n\r\n        let bHasPrependingActiveMRs = false;\r\n        if (activeMRInfo?.ERPStatus?.toLowerCase() === 'active') {\r\n            bHasPrependingActiveMRs = true;\r\n        }\r\n        let MVOOracleTemplate = '';\r\n        // Is current template is unassigned? If unassigned then throw error.\r\n        if (activeMRInfo.template === undefined || activeMRInfo.template === \"\") {\r\n            // for error handling \r\n            const msgtemplate = errorMessages.messages.validationMessages.TEMPLATE_UNASSIGN;\r\n            const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n            const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n            collectErrors.push(`${formattedMessage} ${responseData?.mcoPropeties?.plantName}`);\r\n        }\r\n        if ((Number(activeMRInfo?.sequence)) === 1 && Object.keys(previousSeqMRInfo).length) {\r\n            activeMRInfo.sequence = previousSeqMRInfo?.sequence + 1;\r\n        }\r\n        if ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1)) {\r\n            // Is template is in oracle existing template and Part revision format is not compatible then throws error.\r\n            const skip_partRevision = true;\r\n\r\n            const pattern = /^\\d{2}$/;\r\n            const matches = eachItem?.revision?.match(pattern);\r\n            const getCurrentPartBuInfo = findBusinessUnitByPlant(businessUnitInfo[responseData?.mcoPropeties?.name], eachItem?.organization)\r\n            const sAnyItemOracleExisting = getCurrentPartBuInfo?.oracleExisting?.some(etemplate => etemplate === activeMRInfo.template);\r\n            if (sAnyItemOracleExisting && matches) {\r\n                // for error handling \r\n                const msgtemplate = errorMessages.messages.validationMessages.REV_NOT_COMPATIBLE_WITH_ORACLE_EXISTING;\r\n                const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                collectErrors.push(`${formattedMessage} ${responseData?.mcoPropeties?.plantName}`);\r\n            }\r\n        }\r\n\r\n        // return if we have errors already\r\n        // if (collectErrors.length) {\r\n        //     combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n        //     return;\r\n        // }\r\n\r\n        if (activeMRInfo.sequence > 1) {\r\n            // If both oracle templates are not equal and ERP status is Inactive then it throws error.\r\n            if (activeMRInfo?.template !== previousSeqMRInfo?.template && activeMRInfo?.ERPStatus?.toLowerCase() === \"inactive\") {\r\n                const msgtemplate = errorMessages.messages.validationMessages.CHANGE_ORACLE_TEMPLATE_ON_INACTIVE;\r\n                const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                collectErrors.push(`${formattedMessage} ${responseData?.mcoPropeties?.plantName}`);\r\n            }\r\n\r\n            // If previous ERP status is Active and Current ERP Status is Inactive then need to check for Part where used,\r\n            //  if Part where used is greater than 0 throw error.\r\n            if (previousSeqMRInfo?.ERPStatus?.toLowerCase() === \"active\" && activeMRInfo?.ERPStatus?.toLowerCase() === \"inactive\") {\r\n                if (eachItem?.whereUsedInfo?.length > 0 && whereUsedMRinfo?.length > 0) {//where used check If where used info is exist then throw rror\r\n                    const whereUsedParts = whereUsedMRinfo.map(eachMR => eachMR.partName).join(',');\r\n                    const msgtemplate = errorMessages.messages.validationMessages.MBOM_STILL_USED_ON;\r\n                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                    collectErrors.push(`${formattedMessage} \\n ${MCOPlantName} : ${whereUsedParts}`);\r\n                }\r\n            }\r\n        }\r\n\r\n        // return if we have errors already\r\n        // if (collectErrors.length) {\r\n        //     return { valid: false, errDesc: collectErrors };\r\n        // }\r\n\r\n        if ((activeMRInfo?.ERPStatus?.toLowerCase()) === \"active\") {\r\n            if ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1)) {\r\n                // Check Oracle template is exist in NotAllowedOnMBOMTemplateList then (BU and onMBOM==no)\r\n                // If part is used in any MBOM by checking part WhereUsedinPlant then error like template not allowed (WhereUsedinPlant!=0 throw error)\r\n                const onMBOM_NoTemplatesList = orgAllowedTemplateMappingsList?.filter((tmitem) => {\r\n                    return tmitem?.details?.On_MBOM === \"N\"\r\n                });\r\n                const IstempExists_onMBOM_NoTemplatesList = onMBOM_NoTemplatesList?.find(etemp => {\r\n                    return etemp?.details?.ALLOWABLE_ORG_TEMPLATES === activeMRInfo?.template;\r\n                });\r\n\r\n                if (IstempExists_onMBOM_NoTemplatesList && eachItem?.whereUsedInfo?.length > 0 && whereUsedMRinfo?.length > 0) {\r\n                    const whereUsedParts = whereUsedMRinfo.map(eachMR => eachMR.partName).join(',');\r\n                    const msgtemplate = errorMessages.messages.validationMessages.MBOM_STILL_USED_ON;\r\n                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                    collectErrors.push(`${formattedMessage} \\n ${MCOPlantName} : ${whereUsedParts}`);\r\n                }\r\n\r\n                if (activeMRInfo?.makeOrBuy === \"make\") {\r\n\r\n                    if (!(eachItem?.childInfo?.length) && !(currentPartBuInfo?.makeWithoutBOMList?.includes(activeMRInfo?.template))) {\r\n                        const msgtemplate = errorMessages.messages.validationMessages.HAS_MBOM_WITH_NO_CHILDREN;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(formattedMessage);\r\n                    } else if (eachItem?.childInfo?.length) {\r\n                        collectErrors = checkTemplateExists(eachItem, onMBOM_NoTemplatesList, childPartAndWhereUsedMRDetails?.childParts[eachItem?.name], collectErrors, MCOPlantName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // return if we have errors already\r\n        if (collectErrors.length) {\r\n            combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n            return;\r\n        }\r\n\r\n        // if any errors in this stage just throw and skip the remaining process\r\n        if (MCOPlantName === 'MVO') {\r\n            if ((activeMRInfo?.ERPStatus?.toLowerCase()) === 'active') {\r\n                if ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1)) {\r\n                    const mvoAllowedTemplates = getOrgAllowedTemplateMappingForPlant(templateMappingsInfo, mcoData.businessUnit, MCOPlantName, eachItem?.displayType);\r\n                    if (mvoAllowedTemplates?.includes(activeMRInfo?.template)) {\r\n                        let bMVOTemplateFromToIsAllowed = true;\r\n                        if (activeMRInfo.sequence > 1) {\r\n                            const fromToMVOAllowedChanges = getFromTOmvoAllowedChangesOracleTemplates({\r\n                                templateMappingsInfo,\r\n                                businessUnit: mcoData.businessUnit,\r\n                                plant: 'MVO',\r\n                                prevTemplateName: previousSeqMRInfo?.template\r\n                            });\r\n                            if (!(fromToMVOAllowedChanges.includes(activeMRInfo?.template)) && (activeMRInfo?.template !== previousSeqMRInfo?.template)) {\r\n                                bMVOTemplateFromToIsAllowed = false;\r\n                                const msgtemplate = errorMessages.messages.validationMessages.FromToNotAllowed;\r\n                                const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName, activeMRInfo?.template, previousSeqMRInfo?.template];\r\n                                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                collectErrors.push(formattedMessage);\r\n                                // throw error that current mvo template is not allowed slTemplateFromToNotAllowed\r\n                            }\r\n                        }\r\n                        if (bMVOTemplateFromToIsAllowed) {\r\n                            const mvoTemplateCompatibleTemplates = getMVOTemplateCompatibilityOracleTemplates({ templateMappingsInfo, businessUnit: mcoData.businessUnit, plant: \"\", templateName: activeMRInfo?.template });\r\n                            const currentMVOOracleTemplate = activeMRInfo?.template;\r\n                            let mvoTemplateCompatible = true;\r\n                            getHighestSeqCurrentPendingOrActiveMRForPart(eachItem.name).forEach(eachMR => {\r\n                                if (eachMR.plantName !== 'MVO') {\r\n                                    if (eachMR.template && eachMR.template !== \"Unassigned\" && !(mvoTemplateCompatibleTemplates.includes(eachMR.template))) {\r\n                                        mvoTemplateCompatible = false\r\n                                        const msgtemplate = errorMessages.messages.validationMessages.NotCompatible;\r\n                                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, eachMR.template, MCOPlantName, currentMVOOracleTemplate];\r\n                                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                        collectErrors.push(formattedMessage);\r\n                                    }\r\n                                }\r\n                            })\r\n                            if (mvoTemplateCompatible) {\r\n                                const mvoNotAllowedToHaveEBOM = getMVONotAllowedToHaveEBOMValues(templateMappingsInfo, mcoData.businessUnit);\r\n                                if (mvoNotAllowedToHaveEBOM.includes(activeMRInfo?.template)) {\r\n                                    if (eachItem.childInfo.length > 0) {\r\n                                        //throw error that template is not allowed to have EBOM 3799\r\n                                        const msgtemplate = errorMessages.messages.validationMessages.NotAllowedToHaveEBOM;\r\n                                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, currentMVOOracleTemplate];\r\n                                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                        collectErrors.push(formattedMessage);\r\n                                    }\r\n                                }\r\n\r\n\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        //throw error that template does not contains in mvo allowed templates\r\n                        const msgtemplate = errorMessages.messages.validationMessages.NotAllowedMVO;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, activeMRInfo?.template];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(formattedMessage);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                //MVO ERP status not active rules here\r\n                // 3797 rules should be added here\r\n                const allPlantsWithActiveMR = []\r\n                getHighestSeqCurrentPendingOrActiveMRForPart(eachItem.name).forEach(eachMR => {\r\n                    if (eachMR.plantName !== 'MVO') {\r\n                        allPlantsWithActiveMR.push(eachMR.plantName);\r\n                    }\r\n                })\r\n                const msgtemplate = errorMessages.messages.validationMessages.StillActiveInOtherPlants;\r\n                const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                collectErrors.push(`${formattedMessage} ${allPlantsWithActiveMR.join(',')}`);\r\n            }\r\n        } else {\r\n            // rule of 3815 need to added here\r\n            //gethighest sequence current or Active MR details and get the status of MVO plant \r\n            MVOOracleTemplate = getHighestSeqCurrentOrActiveMR?.template;\r\n            if (bHasPrependingActiveMRs) {\r\n                if (!MVOOracleTemplate) {\r\n                    //throw error that \r\n                    const msgtemplate = errorMessages.messages.validationMessages.MVOMRNotCurrentOrOnThisECOMessage;\r\n                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                    collectErrors.push(formattedMessage);\r\n                }\r\n            }\r\n        }\r\n\r\n        // return if we have errors already\r\n        if (collectErrors.length) {\r\n            combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n            return;\r\n        }\r\n\r\n        //Stage 3 code here\r\n        const highestSeqCurrentPendingOrActiveMRForPart = getHighestSeqCurrentPendingOrActiveMRForPart(eachItem.name);\r\n        if (highestSeqCurrentPendingOrActiveMRForPart && highestSeqCurrentPendingOrActiveMRForPart.length > 0) {\r\n            let allowedOracleTemplateValues = [];\r\n            let mvoTemplateCompatibleTemplates = \"\";\r\n            const sOracleTemplate = activeMRInfo?.template;\r\n            const currentMRSequence = Number(activeMRInfo.sequence);\r\n            if (bHasPrependingActiveMRs) {\r\n                mvoTemplateCompatibleTemplates = getMVOTemplateCompatibilityOracleTemplates({ templateMappingsInfo, businessUnit: mcoData.businessUnit, plant: \"\", templateName: MVOOracleTemplate });\r\n            }\r\n            if (MCOPlantName !== 'MVO' && ((activeMRInfo?.ERPStatus?.toLowerCase()) === \"active\") && ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1))) {\r\n                const partMakeOrBuyValue = activeMRInfo?.makeOrBuy;\r\n\r\n                const getCurrentPartBuInfo = findBusinessUnitByPlant(businessUnitInfo[responseData?.mcoPropeties?.name], eachItem?.organization)\r\n                const checkIsplantExistOrNot = getCurrentPartBuInfo?.plants.find(buPlant => buPlant?.plantName === MCOPlantName);\r\n                if (((partMakeOrBuyValue.toLowerCase()) === 'make') && !checkIsplantExistOrNot) {\r\n                    const msgtemplate = errorMessages.messages.validationMessages.MakeInNonRDOPlant;\r\n                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName];\r\n                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                    collectErrors.push(formattedMessage);\r\n                }\r\n                const orgAllowedTemplates = getOrgAllowedTemplateMappingForPlant(templateMappingsInfo, mcoData.businessUnit, MCOPlantName, eachItem?.displayType);\r\n                allowedOracleTemplateValues = mvoTemplateCompatibleTemplates.filter(eachTemplate => orgAllowedTemplates.includes(eachTemplate))\r\n                // primary purchage Validation checks\r\n                const primaryToPurchageMapping = primaryToPurchageValidationMapping(templateMappingsInfo, mcoData.businessUnit);\r\n                const mustBeAssignedToPurchageValidationPlant = getMustBeAssignedToPurchaseValidationPlantList(templateMappingsInfo, mcoData.businessUnit);\r\n                const mustBeAssignedToPurchageValidationPlantTemplates = mustBeAssignedToPurchageValidationPlant.map(eachRecord => eachRecord?.details?.ALLOWABLE_ORG_TEMPLATES);\r\n\r\n                const purchagetoPrimaryMap = purchageToPrimaryValidationMapping(templateMappingsInfo, mcoData.businessUnit);\r\n                if (!(purchagetoPrimaryMap.has(MCOPlantName))) {\r\n                    if (allowedOracleTemplateValues && sOracleTemplate && !(allowedOracleTemplateValues.includes(sOracleTemplate))) {\r\n                        //MVOOracleTemplate, sOracleTemplate MCOPlantName\r\n                        const msgtemplate = errorMessages.messages.validationMessages.NotCompatibleOrAllowed;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, sOracleTemplate, MCOPlantName, MVOOracleTemplate];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(formattedMessage);\r\n                        // throw the error that MVOOracleTemplate and sOracleTemplate are not compatible for plant 4041\r\n                    }\r\n                    if (Object.keys(primaryToPurchageMapping).includes(MCOPlantName)) {\r\n                        if (sOracleTemplate && mustBeAssignedToPurchageValidationPlantTemplates.includes(sOracleTemplate)) {\r\n                            const purchagePlant = primaryToPurchageMapping[MCOPlantName];\r\n                            if (purchagePlant !== \"None\") {\r\n                                const hasMRForPurchagePlant = highestSeqCurrentPendingOrActiveMRForPart.find(eachMR => purchagePlant === eachMR.partAndPlant.split('_')[1])\r\n                                if (!hasMRForPurchagePlant) {\r\n                                    //throw error Not assigned to purchage validation plant 4060\r\n                                    // MCOPlantName sOracleTemplate purchagePlant\r\n                                    const msgtemplate = errorMessages.messages.validationMessages.NotAssignedToPurchaseValidationPlant;\r\n                                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName, sOracleTemplate, purchagePlant];\r\n                                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                    collectErrors.push(formattedMessage);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    let isAssignedToPrimary = false;\r\n                    if (currentMRSequence === 1) {\r\n                        if (allowedOracleTemplateValues && sOracleTemplate && !(allowedOracleTemplateValues.includes(sOracleTemplate))) {\r\n                            // throw the error that MVOOracleTemplate and sOracleTemplate are not compatible for plant 4087\r\n                            const msgtemplate = errorMessages.messages.validationMessages.NotCompatibleOrAllowed;\r\n                            const msgReplacementArr = [partTypeDisplayName, eachItem?.name, sOracleTemplate, MCOPlantName, MVOOracleTemplate];\r\n                            const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                            collectErrors.push(formattedMessage);\r\n                        }\r\n\r\n                        const getCurrentPartBuInfo = findBusinessUnitByPlant(businessUnitInfo[responseData?.mcoPropeties?.name], eachItem?.organization)\r\n                        const sAnyItemOracleExisting = getCurrentPartBuInfo?.oracleExisting?.some(etemplate => etemplate === sOracleTemplate);\r\n                        if (!sAnyItemOracleExisting) {// need to write this check again\r\n                            const primaryPlants = purchagetoPrimaryMap.get(MCOPlantName);\r\n                            primaryPlants?.forEach(eachPrimary => {\r\n                                const hasMR = highestSeqCurrentPendingOrActiveMRForPart.find(eachMR => eachPrimary === eachMR.partAndPlant.split('_')[1])\r\n                                if (hasMR) {\r\n                                    isAssignedToPrimary = true;\r\n                                }\r\n                            })\r\n                            if (!isAssignedToPrimary) {\r\n                                const primaryPlantsStr = primaryPlants.join(\" or \");\r\n                                //MCOPlantName primaryPlantsStr\r\n                                const msgtemplate = errorMessages.messages.validationMessages.NotAssignedToPrimaryPlant;\r\n                                const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName, primaryPlantsStr];\r\n                                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                collectErrors.push(formattedMessage);\r\n                            }\r\n                        }\r\n\r\n                    } else if (currentMRSequence > 1) {\r\n                        if (mvoTemplateCompatibleTemplates && sOracleTemplate && !(mvoTemplateCompatibleTemplates.includes(sOracleTemplate))) {\r\n                            // throw error that template not compatible 4126\r\n                            const msgtemplate = errorMessages.messages.validationMessages.NotCompatible;\r\n                            const msgReplacementArr = [partTypeDisplayName, eachItem?.name, sOracleTemplate, MCOPlantName, MVOOracleTemplate];\r\n                            const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                            collectErrors.push(formattedMessage);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // return if we have errors already\r\n            if (collectErrors.length) {\r\n                combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n                return;\r\n            }\r\n\r\n            //stage 4 final\r\n            if (MCOPlantName !== 'MVO') {\r\n                // need to write some more code here\r\n                const partBU = eachItem.organization;\r\n                const plantName = MCOPlantName;\r\n                const OracleTemplate = sOracleTemplate;\r\n                const plantPair = getRDOOUOrgSetMappings(templateMappingsInfo, partBU, MCOPlantName);\r\n                if (plantPair?.includes(plantName)) {\r\n                    let templatesFromEachRDOOUPlants = [];\r\n                    let RDOPlanttemplates = [];\r\n                    plantPair?.forEach(eachPlant => {\r\n                        if (eachPlant !== plantName) {\r\n                            const hasMR = highestSeqCurrentPendingOrActiveMRForPart.find(eachMR => eachPlant === eachMR.partAndPlant.split('_')[1])\r\n                            if (hasMR) {\r\n                                const RDOPlantTemplateName = hasMR.template;\r\n                                RDOPlanttemplates = getSetCompatibleTemplates(templateMappingsInfo, partBU, RDOPlantTemplateName);\r\n                                if (RDOPlanttemplates) {\r\n                                    templatesFromEachRDOOUPlants.push(RDOPlanttemplates);\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                    templatesFromEachRDOOUPlants = templatesFromEachRDOOUPlants.flat();\r\n                    if (templatesFromEachRDOOUPlants?.length && !(templatesFromEachRDOOUPlants.includes(OracleTemplate))) {\r\n                        // throw error using this plantPair\r\n                        const msgtemplate = errorMessages.messages.validationMessages.NonMVONotCompatible;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(`${formattedMessage} \\n ${plantPair.join('\\n')}`);\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        if (highestSeqCurrentPendingOrActiveMRForPart && highestSeqCurrentPendingOrActiveMRForPart.length > 0) {\r\n            if ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1)) {\r\n                const mvoNotAllowedToHaveEBOM = getMVONotAllowedToHaveEBOMValues(templateMappingsInfo, mcoData.businessUnit);\r\n                if (mvoNotAllowedToHaveEBOM.includes(activeMRInfo?.template)) {\r\n                    if (eachItem.childInfo.length > 0) {\r\n                        //throw error that template is not allowed to have EBOM\r\n                        const msgtemplate = errorMessages.messages.validationMessages.NotAllowedToHaveEBOM;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MVOOracleTemplate];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(formattedMessage);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (collectErrors.length) {\r\n            combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n            return;\r\n        }\r\n    });\r\n\r\n    // collectErrors.push(`Failed.`);\r\n\r\n    if (combineAllErrors.length) {\r\n        return { valid: false, errDesc: combineAllErrors };\r\n    } else {\r\n        return { valid: true, errDesc: '' };\r\n    }\r\n}\r\n\r\nexport {\r\n    dropdownValidation,\r\n    primaryToPurchageValidationMapping,\r\n    getRDOOUOrgSetMappings\r\n}"],"names":["instance","localStorage","getItem","fetchRSMEAndRMEDetails","mcoService","MCOService","getRSMEList","then","map","ritem","splitValues","split","label","key","id","email","rsmeList","getRMEList","rmeList","_ref","Store","dispatch","update_generalValues","RSMEList","RMEList","catch","err","isPageHavingIssue","CloneDataFromMaster","locresData","masterAttData","new_mcoPropeties","mcoPropeties","msInformation","_msInformation$mcoPro","_msInformation$mcoPro2","_msInformation$mcoPro3","_msInformation$mcoPro4","_msInformation$mcoPro5","_msInformation$mcoPro6","startdate","mcoProperties","rme","rsme","prepareItemPayload","async","_responseData$mcoProp","getStorevalue","getState","plantData","mcoDetails","plants","sourceData","source","templateList","templates","getTargetInfo","prepareTargetInfo","responseData","itemData","getItemDetailsByMcoId","affectedPartsData","getAffectedPartsData","affectedItems","gitem","filteredAffItem","filter","material","filteredAffItemDetail","_getTargetInfo$plantI","length","materialType","name","attributes","attributeMap","plantInfo","isMaster","thisTemp","find","titem","_gitem$materialType","templateName","forEach","aitem","_gitem$attributeGroup","targetKey","sourceValue","attributeGroupData","findingMappingValues","Object","keys","values","attritem","findingMappingValues2","undefined","target","targetInfo","error","_responseData$mcoProp2","_responseData$source","_responseData$mcoProp3","org_id","organizationId","sourceUrl","url","currplantName","plantName","orgarr","fitem","ERPType","generateTargetInfo","findPlantInfo","findTargetInfo","_targetInfo","_targetInfo2","_targetInfo3","environment","_findPlantInfo","_targetInfo4","_targetInfo5","_findPlantInfo2","_findPlantInfo2$Conne","_findPlantInfo3","_findPlantInfo3$Conne","_findPlantInfo4","_findPlantInfo4$Conne","_findPlantInfo5","_findPlantInfo5$Conne","_findPlantInfo6","_findPlantInfo6$Conne","_findPlantInfo$bomusa","_findPlantInfo7","findPlantName","aliasPlant","system","businessUnit","plant","ConnectivityDetails","username","password","authkey","port","sapsysnum","sapclientid","bomusage","prepareFormData","data","labelArr","mcostate","responseFromErp","description","ECOExportToERP","requiredFields","item","hasOwnProperty","includes","prepareFormDataForMassUpdate","validateForm","vType","errors","console","log","currentDate","Date","setHours","parts","startDate","_values$rme","_values$rsme","toLowerCase","validationChecks","_responseData$mcoProp4","arguments","templateMappingsInfo","errorsOfPropertiesForm","valid","errDesc","colErrorsArr","mcoData","gkey","_gitem$materialType2","msgtemplate","_errorMessages$messag","_errorMessages$messag2","errorMessages","SAP","templateUnassigned","_errorMessages$messag3","_errorMessages$messag4","ORACLE","msgReplacementArr","formattedMessage","formatMessage","push","collectSourcePlantTemplate","resData","getMasterDatails","_resData$mcoPropeties","_resData$mcoPropeties2","_resData$source","_getMasterDatails$","_resData$mcoPropeties3","_resData$mcoPropeties4","sptPayload","materialDataArr","getSourcePlantTemplate","respdata","_resData$mcoPropertie","_getMasterDatails$2","_getMasterDatails$3","_getMasterDatails$4","_resData$mcoPropeties6","_respdata$templateMap","_resData$mcoPropeties9","_resData$mcoPropeties5","merge_templates","_resData$mcoaffectedI","_resData$mcoaffectedI2","_resData$mcoPropeties7","_resData$source2","_getMasterDatails$5","_resData$mcoaffectedI3","_resData$mcoaffectedI4","_resData$mcoPropeties8","mastersptPayload","mcoaffectedItem","relatedMCOs","respdata2","concat","ORGAllowedTemplateMappings","tmitem","MappingType","final_spt","businessUnitList","materialData","initialMRFunctions","_locresData$mcoPropet","_locresData$mcoPropet2","_locresData$mcoPropet6","_locresData$mcoPropet7","instanceVal","getMrPayload","_locresData$mcoaffect","_locresData$mcoPropet3","_locresData$mcoPropet4","_locresData$mcoPropet5","partName","organization","mcoId","mcoName","revision","partId","targetPlant","_locresData$mcoPropet8","orgId","masterMapping","generalInfo","masterPlantName","_locresData$mcoPropet9","_locresData$mcoPropet10","_locresData$mcoPropet11","mrData","getMRbyPartAndPlant","mrDetails","collectAndStoreMRDetails","mrPayload","getBusinessUnitbyid","allPartsBusinessUnitDetails","resp","collectAllPartBUDetails","_resData$mcoPropeties10","inst","payload","systemSettingsService","SystemSettingsService","getSystemSettingsbyid","status","systemSetingsDetail","collectSystemSettingsDetails","_resData$mcoPropeties11","_resData$mcoPropeties12","currentMCOName","currentMCOPlantdetails","parentMCOName","replace","getMcoDetailsByName","_resp$parentMCOName","_resp$parentMCOName$m","parentMCODetails","collectParentMCODetails","updateMcoDetailsInDatabase","updatedPropetiesValue","saveMode","_responseData$mcoProp6","getpayloadData","getattributesbyid","payloadData","_responseData$mcoProp7","_responseData$mcoProp8","_responseData$mcoProp9","_responseData$mcoProp10","_responseData$mcoProp11","_responseData$mcoProp12","_responseData$mcoProp13","_responseData$mcoProp14","_responseData$mcoProp15","_responseData$mcoProp16","producthub","uniquePartId","updateOrAddAttribute","updateFunction","updateattributesbyid","addattributes","getUpdateResponse","updateResData","updateMcoDetails","prepareAffectedPartData","message","_getStorevalue$mcoDet","_getStorevalue$mcoDet2","handleMaterialTypeSelect","selectedValue","thisRowId","dropType","thisRowIndex","findIndex","foption","_findMaterialName","_findMaterialName2","_mcoaffectedItem$this","findMaterialName","partBusinessUnitValue","buplantmapping_RDOPlants","acitem","_acitem$BUID","_acitem$details","BUID","details","Entity","hasMbomTemplateList","_acitem$BUID2","_acitem$details2","_acitem$details2$Has_","Has_MBOM","eitem","_eitem$details","ALLOWABLE_ORG_TEMPLATES","isExceptionalPlant","hasMbomTemplate","_findMaterialName3","_buplantmapping_RDOPl","_responseData$mcoProp17","plantValue","PLANT","getPlantList","ekeys","_plantValue$ekeys","newRevision","oldRevision","currentSequence","isMaterialFormEdited","findLabelForTooltip","findMaterialDetails","selectedOption","option","findDropdownValue","affval","masterData","master","_masterData$mcoaffect","_findMaterialDetails","affkey","_masterData$mcoaffect2","_masterData$mcoaffect3","_findMaterialDetails2","_affval$materialType","_affval$attributeGrou","desc","ERPItemTypeTemplate","_responseData$mcoaffe2","eachTemplateOptions","dropdownOpts","_window","_responseData$mcoaffe3","window","ExternalClass","affectedItemsInfo","externalClass","getDropdownOptions","_Object$keys","_Object$keys2","_thisDropOptions","_Object$keys3","_Object$keys4","_Object$keys5","_mrDetails$activeMR","_mrDetails$activeMR$a","_Object$keys6","_Object$keys7","_Object$keys8","_mrDetails$activeMR2","_mrDetails$previousSe","_Object$keys9","_thisDropOptions2","_Object$keys10","_Object$keys11","_Object$keys13","_affval$itemStatus","thisDropOptions","templExistOrNot","mtemp","prevSelectedTemplateObj","_findMaterialDetails3","Name","activeMRData","activeMR","additionalSequence","sequence","previousSeqMRData","previousSeqMR","activeMRtemplExistOrNot","_findMaterialDetails4","activeTemplateObj","template","_findMaterialDetails5","isTemplateValueChange","defaultOptValue","_Object$keys12","previousSeqMRTemplateObj","findex","_thisDropOptions3","_Object$keys14","_Object$keys15","_Object$keys16","isRevisionTempExist","fcheckItem","_findMaterialDetails6","_findMaterialDetails7","getExportToERPValue","exportToERP","getItemStatusValue","itemStatus","_activeMRData$ERPStat","isExportToERPValueChange","isItemStatusValueChange","ERPStatus","exportMCOData","propertiesData","exportAffectedPartsData","_mcoaffectedItemVal","currentMcoDetails","mcoaffectedItemVal","sortAffData","direction","new_mcoaffectedItemVal","_ErpStatus","_ErpStatus$","ErpStatus","itemERPStatus","efitem","Item_Name","ERPstatus","ERPErrorDescription","sortConfig","sortedData","sort","a","b","_a$materialType","_b$materialType","_a$materialType2","_b$materialType2","trimmingDisplayContent","_newERPErrorDescripti3","newERPErrorDescriptionVal","_newERPErrorDescripti","_newERPErrorDescripti2","Array","isArray","flat","join","replaceAll","getIsMaterialFormEdited","_getStorevalue$mcoDet3","handleErrorForThrows","context","findMRTemplateByPart","mrLists","partInfo","findBusinessUnitByPlant","buLists","getHighestSeqCurrentPendingOrActiveMRForPart","retunedMRS","getHighestSeqCurrentPendingOrActiveMR","eachMR","partAndPlant","getMVONotAllowedToHaveEBOMValues","item1","_item1$details","_item1$details$EBOM_A","EBOM_Allowed","toUpperCase","_titem$details","primaryToPurchageValidationMapping","purchageValidationMapping","_item1$details2","_purchageValidationMa","primaryToPurchagePlants","eachKey","groupByValues","anyObject","purchagetoPrimaryMap","Map","purchageValue","has","value","get","set","getRDOOUOrgSetMappings","_buplantmapping_RDOCh","_buplantmapping_RDOCh2","_plantGroups","_plantGroups$details","plantToMatch","buplantmapping_RDOChecks","plantGroups","_item1$details3","OUgroupMap","matchedPlantsSet","filteredPlants","getOrgAllowedTemplateMappingForPlant","partType","finalTemplates","orgAllowedTemplatesForPlant","_item1$details4","_item1$details5","Plants","getPartTypeDetails","parttypetotemplateArr","ENGG_ITEM_TYPE","templatesMappingsArr","_parttypetotemplateAr","_parttypetotemplateAr2","allowableOrgTemplates","item2","_item1$details6","org_allowed_template","_getPartTypeDetails$m","_flatenPartTypeTempla","flatenPartTypeTemplates","partTypeTemplate","_partTypeTemplate$det","templatesForAllTypes","eachRec","_eachRec$exclusive_us","exclusive_use","eachTemplate","_eachTemplate$details","_templatesMappingsArr","tItem","_tItem$details","getMVOTemplateCompatibilityOracleTemplates","_ref2","MVOTemplateCompatibilityOracleTemplates","_item1$details8","MVO_TEMPLATE_OPTION","_MVOTemplateCompatibi","_MVOTemplateCompatibi2","_MVOTemplateCompatibi3","_MVOTemplateCompatibi4","fiItem","_fiItem$status","ALLOWABLE_ORG_TEMPLATE","dropdownValidation","orgAllowedTemplateMappingsList","businessUnitInfo","combineAllErrors","childPartAndWhereUsedMRDetails","collectChildParts","collectWhereUsedInParts","eachChildItem","_eachChildItem$childI","_eachChildItem$whereU","collectChildPartName","childInfo","eachparts","partsDetailsArr","collectUsedInPartName","whereUsedInfo","whereUsedparts","whereUsedpartsDetailsArr","getChildPartDetails","childParts","whereUsedInParts","eachItem","_responseData$mcoProp5","_activeMRInfo$ERPStat","_activeMRInfo$ERPStat4","collectErrors","currentPartBuInfo","MCOPlantName","partTypeDisplayName","displayType","activeMRInfo","previousSeqMRInfo","getHighestSeqCurrentOrActiveMR","whereUsedMRinfo","whereUsedChecks","whereUsedLists","_fitem$makeOrBuy","makeOrBuy","bHasPrependingActiveMRs","MVOOracleTemplate","Number","_eachItem$revision","_getCurrentPartBuInfo","pattern","matches","match","getCurrentPartBuInfo","oracleExisting","some","etemplate","_activeMRInfo$ERPStat2","_previousSeqMRInfo$ER","_activeMRInfo$ERPStat3","_eachItem$whereUsedIn","_whereUsedMRinfo","whereUsedParts","_eachItem$whereUsedIn2","_whereUsedMRinfo2","onMBOM_NoTemplatesList","_tmitem$details","On_MBOM","etemp","_etemp$details","_eachItem$childInfo","_currentPartBuInfo$ma","_eachItem$childInfo2","makeWithoutBOMList","checkTemplateExists","currPartChilddetails","slChildrenWithoutMR","slChildNotAllowedOnMBOM","cfitem","childPartName","eachTempRec","_eachTempRec$details","childMessage","validationMessages","CHILD_PART_MR_NOT_ASSIGNED","NotAllowedOnMBOMChildren","_activeMRInfo$ERPStat5","mvoAllowedTemplates","bMVOTemplateFromToIsAllowed","fromToMVOAllowedChanges","prevTemplateName","fromTOmvoAllowedChangesOracleTemplates","_item1$details7","MVO_TEMPLATE_FROM","_fromTOmvoAllowedChan","_fromTOmvoAllowedChan2","_fromTOmvoAllowedChan3","MVO_TEMPLATES_TO","MVO_TEMPLATE_TO","getFromTOmvoAllowedChangesOracleTemplates","mvoTemplateCompatibleTemplates","currentMVOOracleTemplate","mvoTemplateCompatible","allPlantsWithActiveMR","highestSeqCurrentPendingOrActiveMRForPart","_activeMRInfo$ERPStat6","allowedOracleTemplateValues","sOracleTemplate","currentMRSequence","partMakeOrBuyValue","checkIsplantExistOrNot","buPlant","orgAllowedTemplates","primaryToPurchageMapping","mustBeAssignedToPurchageValidationPlantTemplates","_item1$details9","_item1$details9$PO_Or","PO_Org_Exist_Check","getMustBeAssignedToPurchaseValidationPlantList","eachRecord","_eachRecord$details","primaryToPurchageValidation","purchageToPrimaryValidationMapping","isAssignedToPrimary","_getCurrentPartBuInfo2","primaryPlants","eachPrimary","primaryPlantsStr","purchagePlant","partBU","OracleTemplate","plantPair","_templatesFromEachRDO","templatesFromEachRDOOUPlants","RDOPlanttemplates","eachPlant","hasMR","RDOPlantTemplateName","getMappedTemplatesList","_item1$details10","TEMPLATE_ORG_EXISTING","_getMappedTemplatesLi","_getMappedTemplatesLi2","_getMappedTemplatesLi3","TEMPLATE_ORG_MODIFYING","getSetCompatibleTemplates"],"sourceRoot":""}